import IModel from '../../core/interface/IModel';
import * as Gs2StateMachine from '../../stateMachine/model';
export default class Status implements IModel {
    private statusId;
    private userId;
    private name;
    private stateMachineVersion;
    private enableSpeculativeExecution;
    private stateMachineDefinition;
    private randomStatus;
    private stacks;
    private variables;
    private status;
    private lastError;
    private transitionCount;
    private createdAt;
    private updatedAt;
    static getRegion(grn: string): string | null;
    static getOwnerId(grn: string): string | null;
    static getNamespaceName(grn: string): string | null;
    static getUserId(grn: string): string | null;
    static getStatusName(grn: string): string | null;
    static isValid(grn: string): boolean;
    static createGrn(region: string | null, ownerId: string | null, namespaceName: string | null, userId: string | null, statusName: string | null): string | null;
    getStatusId(): string | null;
    setStatusId(statusId: string | null): this;
    withStatusId(statusId: string | null): this;
    getUserId(): string | null;
    setUserId(userId: string | null): this;
    withUserId(userId: string | null): this;
    getName(): string | null;
    setName(name: string | null): this;
    withName(name: string | null): this;
    getStateMachineVersion(): number | null;
    setStateMachineVersion(stateMachineVersion: number | null): this;
    withStateMachineVersion(stateMachineVersion: number | null): this;
    getEnableSpeculativeExecution(): string | null;
    setEnableSpeculativeExecution(enableSpeculativeExecution: string | null): this;
    withEnableSpeculativeExecution(enableSpeculativeExecution: string | null): this;
    getStateMachineDefinition(): string | null;
    setStateMachineDefinition(stateMachineDefinition: string | null): this;
    withStateMachineDefinition(stateMachineDefinition: string | null): this;
    getRandomStatus(): Gs2StateMachine.RandomStatus | null;
    setRandomStatus(randomStatus: Gs2StateMachine.RandomStatus | null): this;
    withRandomStatus(randomStatus: Gs2StateMachine.RandomStatus | null): this;
    getStacks(): Gs2StateMachine.StackEntry[] | null;
    setStacks(stacks: Gs2StateMachine.StackEntry[] | null): this;
    withStacks(stacks: Gs2StateMachine.StackEntry[] | null): this;
    getVariables(): Gs2StateMachine.Variable[] | null;
    setVariables(variables: Gs2StateMachine.Variable[] | null): this;
    withVariables(variables: Gs2StateMachine.Variable[] | null): this;
    getStatus(): string | null;
    setStatus(status: string | null): this;
    withStatus(status: string | null): this;
    getLastError(): string | null;
    setLastError(lastError: string | null): this;
    withLastError(lastError: string | null): this;
    getTransitionCount(): number | null;
    setTransitionCount(transitionCount: number | null): this;
    withTransitionCount(transitionCount: number | null): this;
    getCreatedAt(): number | null;
    setCreatedAt(createdAt: number | null): this;
    withCreatedAt(createdAt: number | null): this;
    getUpdatedAt(): number | null;
    setUpdatedAt(updatedAt: number | null): this;
    withUpdatedAt(updatedAt: number | null): this;
    static fromDict(data: {
        [key: string]: any;
    }): Status | null;
    toDict(): {
        [key: string]: any;
    };
}

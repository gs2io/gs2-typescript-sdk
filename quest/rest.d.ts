import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2QuestRestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    prepareImportUserDataByUserId(request: Request.PrepareImportUserDataByUserIdRequest): Promise<Result.PrepareImportUserDataByUserIdResult>;
    importUserDataByUserId(request: Request.ImportUserDataByUserIdRequest): Promise<Result.ImportUserDataByUserIdResult>;
    checkImportUserDataByUserId(request: Request.CheckImportUserDataByUserIdRequest): Promise<Result.CheckImportUserDataByUserIdResult>;
    describeQuestGroupModelMasters(request: Request.DescribeQuestGroupModelMastersRequest): Promise<Result.DescribeQuestGroupModelMastersResult>;
    createQuestGroupModelMaster(request: Request.CreateQuestGroupModelMasterRequest): Promise<Result.CreateQuestGroupModelMasterResult>;
    getQuestGroupModelMaster(request: Request.GetQuestGroupModelMasterRequest): Promise<Result.GetQuestGroupModelMasterResult>;
    updateQuestGroupModelMaster(request: Request.UpdateQuestGroupModelMasterRequest): Promise<Result.UpdateQuestGroupModelMasterResult>;
    deleteQuestGroupModelMaster(request: Request.DeleteQuestGroupModelMasterRequest): Promise<Result.DeleteQuestGroupModelMasterResult>;
    describeQuestModelMasters(request: Request.DescribeQuestModelMastersRequest): Promise<Result.DescribeQuestModelMastersResult>;
    createQuestModelMaster(request: Request.CreateQuestModelMasterRequest): Promise<Result.CreateQuestModelMasterResult>;
    getQuestModelMaster(request: Request.GetQuestModelMasterRequest): Promise<Result.GetQuestModelMasterResult>;
    updateQuestModelMaster(request: Request.UpdateQuestModelMasterRequest): Promise<Result.UpdateQuestModelMasterResult>;
    deleteQuestModelMaster(request: Request.DeleteQuestModelMasterRequest): Promise<Result.DeleteQuestModelMasterResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentQuestMaster(request: Request.GetCurrentQuestMasterRequest): Promise<Result.GetCurrentQuestMasterResult>;
    updateCurrentQuestMaster(request: Request.UpdateCurrentQuestMasterRequest): Promise<Result.UpdateCurrentQuestMasterResult>;
    updateCurrentQuestMasterFromGitHub(request: Request.UpdateCurrentQuestMasterFromGitHubRequest): Promise<Result.UpdateCurrentQuestMasterFromGitHubResult>;
    describeProgressesByUserId(request: Request.DescribeProgressesByUserIdRequest): Promise<Result.DescribeProgressesByUserIdResult>;
    createProgressByUserId(request: Request.CreateProgressByUserIdRequest): Promise<Result.CreateProgressByUserIdResult>;
    getProgress(request: Request.GetProgressRequest): Promise<Result.GetProgressResult>;
    getProgressByUserId(request: Request.GetProgressByUserIdRequest): Promise<Result.GetProgressByUserIdResult>;
    start(request: Request.StartRequest): Promise<Result.StartResult>;
    startByUserId(request: Request.StartByUserIdRequest): Promise<Result.StartByUserIdResult>;
    end(request: Request.EndRequest): Promise<Result.EndResult>;
    endByUserId(request: Request.EndByUserIdRequest): Promise<Result.EndByUserIdResult>;
    deleteProgress(request: Request.DeleteProgressRequest): Promise<Result.DeleteProgressResult>;
    deleteProgressByUserId(request: Request.DeleteProgressByUserIdRequest): Promise<Result.DeleteProgressByUserIdResult>;
    createProgressByStampSheet(request: Request.CreateProgressByStampSheetRequest): Promise<Result.CreateProgressByStampSheetResult>;
    deleteProgressByStampTask(request: Request.DeleteProgressByStampTaskRequest): Promise<Result.DeleteProgressByStampTaskResult>;
    describeCompletedQuestLists(request: Request.DescribeCompletedQuestListsRequest): Promise<Result.DescribeCompletedQuestListsResult>;
    describeCompletedQuestListsByUserId(request: Request.DescribeCompletedQuestListsByUserIdRequest): Promise<Result.DescribeCompletedQuestListsByUserIdResult>;
    getCompletedQuestList(request: Request.GetCompletedQuestListRequest): Promise<Result.GetCompletedQuestListResult>;
    getCompletedQuestListByUserId(request: Request.GetCompletedQuestListByUserIdRequest): Promise<Result.GetCompletedQuestListByUserIdResult>;
    deleteCompletedQuestListByUserId(request: Request.DeleteCompletedQuestListByUserIdRequest): Promise<Result.DeleteCompletedQuestListByUserIdResult>;
    describeQuestGroupModels(request: Request.DescribeQuestGroupModelsRequest): Promise<Result.DescribeQuestGroupModelsResult>;
    getQuestGroupModel(request: Request.GetQuestGroupModelRequest): Promise<Result.GetQuestGroupModelResult>;
    describeQuestModels(request: Request.DescribeQuestModelsRequest): Promise<Result.DescribeQuestModelsResult>;
    getQuestModel(request: Request.GetQuestModelRequest): Promise<Result.GetQuestModelResult>;
}

import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2DistributorRestClient extends AbstractGs2RestClient {
    static ENDPOINT_HOST: string | null;
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    getServiceVersion(request: Request.GetServiceVersionRequest): Promise<Result.GetServiceVersionResult>;
    describeDistributorModelMasters(request: Request.DescribeDistributorModelMastersRequest): Promise<Result.DescribeDistributorModelMastersResult>;
    createDistributorModelMaster(request: Request.CreateDistributorModelMasterRequest): Promise<Result.CreateDistributorModelMasterResult>;
    getDistributorModelMaster(request: Request.GetDistributorModelMasterRequest): Promise<Result.GetDistributorModelMasterResult>;
    updateDistributorModelMaster(request: Request.UpdateDistributorModelMasterRequest): Promise<Result.UpdateDistributorModelMasterResult>;
    deleteDistributorModelMaster(request: Request.DeleteDistributorModelMasterRequest): Promise<Result.DeleteDistributorModelMasterResult>;
    describeDistributorModels(request: Request.DescribeDistributorModelsRequest): Promise<Result.DescribeDistributorModelsResult>;
    getDistributorModel(request: Request.GetDistributorModelRequest): Promise<Result.GetDistributorModelResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentDistributorMaster(request: Request.GetCurrentDistributorMasterRequest): Promise<Result.GetCurrentDistributorMasterResult>;
    preUpdateCurrentDistributorMaster(request: Request.PreUpdateCurrentDistributorMasterRequest): Promise<Result.PreUpdateCurrentDistributorMasterResult>;
    updateCurrentDistributorMaster(request: Request.UpdateCurrentDistributorMasterRequest): Promise<Result.UpdateCurrentDistributorMasterResult>;
    updateCurrentDistributorMasterFromGitHub(request: Request.UpdateCurrentDistributorMasterFromGitHubRequest): Promise<Result.UpdateCurrentDistributorMasterFromGitHubResult>;
    distribute(request: Request.DistributeRequest): Promise<Result.DistributeResult>;
    distributeWithoutOverflowProcess(request: Request.DistributeWithoutOverflowProcessRequest): Promise<Result.DistributeWithoutOverflowProcessResult>;
    runVerifyTask(request: Request.RunVerifyTaskRequest): Promise<Result.RunVerifyTaskResult>;
    runStampTask(request: Request.RunStampTaskRequest): Promise<Result.RunStampTaskResult>;
    runStampSheet(request: Request.RunStampSheetRequest): Promise<Result.RunStampSheetResult>;
    runStampSheetExpress(request: Request.RunStampSheetExpressRequest): Promise<Result.RunStampSheetExpressResult>;
    runVerifyTaskWithoutNamespace(request: Request.RunVerifyTaskWithoutNamespaceRequest): Promise<Result.RunVerifyTaskWithoutNamespaceResult>;
    runStampTaskWithoutNamespace(request: Request.RunStampTaskWithoutNamespaceRequest): Promise<Result.RunStampTaskWithoutNamespaceResult>;
    runStampSheetWithoutNamespace(request: Request.RunStampSheetWithoutNamespaceRequest): Promise<Result.RunStampSheetWithoutNamespaceResult>;
    runStampSheetExpressWithoutNamespace(request: Request.RunStampSheetExpressWithoutNamespaceRequest): Promise<Result.RunStampSheetExpressWithoutNamespaceResult>;
    setTransactionDefaultConfig(request: Request.SetTransactionDefaultConfigRequest): Promise<Result.SetTransactionDefaultConfigResult>;
    setTransactionDefaultConfigByUserId(request: Request.SetTransactionDefaultConfigByUserIdRequest): Promise<Result.SetTransactionDefaultConfigByUserIdResult>;
    freezeMasterData(request: Request.FreezeMasterDataRequest): Promise<Result.FreezeMasterDataResult>;
    freezeMasterDataByUserId(request: Request.FreezeMasterDataByUserIdRequest): Promise<Result.FreezeMasterDataByUserIdResult>;
    signFreezeMasterDataTimestamp(request: Request.SignFreezeMasterDataTimestampRequest): Promise<Result.SignFreezeMasterDataTimestampResult>;
    freezeMasterDataBySignedTimestamp(request: Request.FreezeMasterDataBySignedTimestampRequest): Promise<Result.FreezeMasterDataBySignedTimestampResult>;
    freezeMasterDataByTimestamp(request: Request.FreezeMasterDataByTimestampRequest): Promise<Result.FreezeMasterDataByTimestampResult>;
    batchExecuteApi(request: Request.BatchExecuteApiRequest): Promise<Result.BatchExecuteApiResult>;
    ifExpressionByUserId(request: Request.IfExpressionByUserIdRequest): Promise<Result.IfExpressionByUserIdResult>;
    andExpressionByUserId(request: Request.AndExpressionByUserIdRequest): Promise<Result.AndExpressionByUserIdResult>;
    orExpressionByUserId(request: Request.OrExpressionByUserIdRequest): Promise<Result.OrExpressionByUserIdResult>;
    ifExpressionByStampTask(request: Request.IfExpressionByStampTaskRequest): Promise<Result.IfExpressionByStampTaskResult>;
    andExpressionByStampTask(request: Request.AndExpressionByStampTaskRequest): Promise<Result.AndExpressionByStampTaskResult>;
    orExpressionByStampTask(request: Request.OrExpressionByStampTaskRequest): Promise<Result.OrExpressionByStampTaskResult>;
    getStampSheetResult(request: Request.GetStampSheetResultRequest): Promise<Result.GetStampSheetResultResult>;
    getStampSheetResultByUserId(request: Request.GetStampSheetResultByUserIdRequest): Promise<Result.GetStampSheetResultByUserIdResult>;
    runTransaction(request: Request.RunTransactionRequest): Promise<Result.RunTransactionResult>;
    getTransactionResult(request: Request.GetTransactionResultRequest): Promise<Result.GetTransactionResultResult>;
    getTransactionResultByUserId(request: Request.GetTransactionResultByUserIdRequest): Promise<Result.GetTransactionResultByUserIdResult>;
}

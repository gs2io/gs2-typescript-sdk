import IRequest from '../../core/interface/IRequest';
import * as Gs2Distributor from '../model';
export default class IfExpressionByUserIdRequest implements IRequest {
    private requestId;
    private contextStack;
    private namespaceName;
    private userId;
    private condition;
    private trueActions;
    private falseActions;
    private multiplyValueSpecifyingQuantity;
    private timeOffsetToken;
    private duplicationAvoider;
    getRequestId(): string | null;
    setRequestId(requestId: string | null): this;
    withRequestId(requestId: string | null): this;
    getContextStack(): string | null;
    setContextStack(contextStack: string | null): this;
    withContextStack(contextStack: string | null): this;
    getNamespaceName(): string | null;
    setNamespaceName(namespaceName: string | null): this;
    withNamespaceName(namespaceName: string | null): this;
    getUserId(): string | null;
    setUserId(userId: string | null): this;
    withUserId(userId: string | null): this;
    getCondition(): Gs2Distributor.VerifyAction | null;
    setCondition(condition: Gs2Distributor.VerifyAction | null): this;
    withCondition(condition: Gs2Distributor.VerifyAction | null): this;
    getTrueActions(): Gs2Distributor.ConsumeAction[] | null;
    setTrueActions(trueActions: Gs2Distributor.ConsumeAction[] | null): this;
    withTrueActions(trueActions: Gs2Distributor.ConsumeAction[] | null): this;
    getFalseActions(): Gs2Distributor.ConsumeAction[] | null;
    setFalseActions(falseActions: Gs2Distributor.ConsumeAction[] | null): this;
    withFalseActions(falseActions: Gs2Distributor.ConsumeAction[] | null): this;
    getMultiplyValueSpecifyingQuantity(): boolean | null;
    setMultiplyValueSpecifyingQuantity(multiplyValueSpecifyingQuantity: boolean | null): this;
    withMultiplyValueSpecifyingQuantity(multiplyValueSpecifyingQuantity: boolean | null): this;
    getTimeOffsetToken(): string | null;
    setTimeOffsetToken(timeOffsetToken: string | null): this;
    withTimeOffsetToken(timeOffsetToken: string | null): this;
    getDuplicationAvoider(): string | null;
    setDuplicationAvoider(duplicationAvoider: string | null): this;
    withDuplicationAvoider(duplicationAvoider: string | null): this;
    static fromDict(data: {
        [key: string]: any;
    }): IfExpressionByUserIdRequest;
    toDict(): {
        [key: string]: any;
    };
}

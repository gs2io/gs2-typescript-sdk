import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2EnchantRestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    describeBalanceParameterModels(request: Request.DescribeBalanceParameterModelsRequest): Promise<Result.DescribeBalanceParameterModelsResult>;
    getBalanceParameterModel(request: Request.GetBalanceParameterModelRequest): Promise<Result.GetBalanceParameterModelResult>;
    describeBalanceParameterModelMasters(request: Request.DescribeBalanceParameterModelMastersRequest): Promise<Result.DescribeBalanceParameterModelMastersResult>;
    createBalanceParameterModelMaster(request: Request.CreateBalanceParameterModelMasterRequest): Promise<Result.CreateBalanceParameterModelMasterResult>;
    getBalanceParameterModelMaster(request: Request.GetBalanceParameterModelMasterRequest): Promise<Result.GetBalanceParameterModelMasterResult>;
    updateBalanceParameterModelMaster(request: Request.UpdateBalanceParameterModelMasterRequest): Promise<Result.UpdateBalanceParameterModelMasterResult>;
    deleteBalanceParameterModelMaster(request: Request.DeleteBalanceParameterModelMasterRequest): Promise<Result.DeleteBalanceParameterModelMasterResult>;
    describeRarityParameterModels(request: Request.DescribeRarityParameterModelsRequest): Promise<Result.DescribeRarityParameterModelsResult>;
    getRarityParameterModel(request: Request.GetRarityParameterModelRequest): Promise<Result.GetRarityParameterModelResult>;
    describeRarityParameterModelMasters(request: Request.DescribeRarityParameterModelMastersRequest): Promise<Result.DescribeRarityParameterModelMastersResult>;
    createRarityParameterModelMaster(request: Request.CreateRarityParameterModelMasterRequest): Promise<Result.CreateRarityParameterModelMasterResult>;
    getRarityParameterModelMaster(request: Request.GetRarityParameterModelMasterRequest): Promise<Result.GetRarityParameterModelMasterResult>;
    updateRarityParameterModelMaster(request: Request.UpdateRarityParameterModelMasterRequest): Promise<Result.UpdateRarityParameterModelMasterResult>;
    deleteRarityParameterModelMaster(request: Request.DeleteRarityParameterModelMasterRequest): Promise<Result.DeleteRarityParameterModelMasterResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentParameterMaster(request: Request.GetCurrentParameterMasterRequest): Promise<Result.GetCurrentParameterMasterResult>;
    updateCurrentParameterMaster(request: Request.UpdateCurrentParameterMasterRequest): Promise<Result.UpdateCurrentParameterMasterResult>;
    updateCurrentParameterMasterFromGitHub(request: Request.UpdateCurrentParameterMasterFromGitHubRequest): Promise<Result.UpdateCurrentParameterMasterFromGitHubResult>;
    describeBalanceParameterStatuses(request: Request.DescribeBalanceParameterStatusesRequest): Promise<Result.DescribeBalanceParameterStatusesResult>;
    describeBalanceParameterStatusesByUserId(request: Request.DescribeBalanceParameterStatusesByUserIdRequest): Promise<Result.DescribeBalanceParameterStatusesByUserIdResult>;
    getBalanceParameterStatus(request: Request.GetBalanceParameterStatusRequest): Promise<Result.GetBalanceParameterStatusResult>;
    getBalanceParameterStatusByUserId(request: Request.GetBalanceParameterStatusByUserIdRequest): Promise<Result.GetBalanceParameterStatusByUserIdResult>;
    deleteBalanceParameterStatusByUserId(request: Request.DeleteBalanceParameterStatusByUserIdRequest): Promise<Result.DeleteBalanceParameterStatusByUserIdResult>;
    reDrawBalanceParameterStatusByUserId(request: Request.ReDrawBalanceParameterStatusByUserIdRequest): Promise<Result.ReDrawBalanceParameterStatusByUserIdResult>;
    reDrawBalanceParameterStatusByStampSheet(request: Request.ReDrawBalanceParameterStatusByStampSheetRequest): Promise<Result.ReDrawBalanceParameterStatusByStampSheetResult>;
    describeRarityParameterStatuses(request: Request.DescribeRarityParameterStatusesRequest): Promise<Result.DescribeRarityParameterStatusesResult>;
    describeRarityParameterStatusesByUserId(request: Request.DescribeRarityParameterStatusesByUserIdRequest): Promise<Result.DescribeRarityParameterStatusesByUserIdResult>;
    getRarityParameterStatus(request: Request.GetRarityParameterStatusRequest): Promise<Result.GetRarityParameterStatusResult>;
    getRarityParameterStatusByUserId(request: Request.GetRarityParameterStatusByUserIdRequest): Promise<Result.GetRarityParameterStatusByUserIdResult>;
    deleteRarityParameterStatusByUserId(request: Request.DeleteRarityParameterStatusByUserIdRequest): Promise<Result.DeleteRarityParameterStatusByUserIdResult>;
    reDrawRarityParameterStatusByUserId(request: Request.ReDrawRarityParameterStatusByUserIdRequest): Promise<Result.ReDrawRarityParameterStatusByUserIdResult>;
    reDrawRarityParameterStatusByStampSheet(request: Request.ReDrawRarityParameterStatusByStampSheetRequest): Promise<Result.ReDrawRarityParameterStatusByStampSheetResult>;
    addRarityParameterStatusByUserId(request: Request.AddRarityParameterStatusByUserIdRequest): Promise<Result.AddRarityParameterStatusByUserIdResult>;
    addRarityParameterStatusByStampSheet(request: Request.AddRarityParameterStatusByStampSheetRequest): Promise<Result.AddRarityParameterStatusByStampSheetResult>;
    verifyRarityParameterStatus(request: Request.VerifyRarityParameterStatusRequest): Promise<Result.VerifyRarityParameterStatusResult>;
    verifyRarityParameterStatusByUserId(request: Request.VerifyRarityParameterStatusByUserIdRequest): Promise<Result.VerifyRarityParameterStatusByUserIdResult>;
    verifyRarityParameterStatusByStampTask(request: Request.VerifyRarityParameterStatusByStampTaskRequest): Promise<Result.VerifyRarityParameterStatusByStampTaskResult>;
}

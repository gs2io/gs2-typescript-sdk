export declare class TimeoutError extends Error {
    constructor(timeoutInMs?: number);
}
export declare const DEFAULT_INTERVAL_BETWEEN_ATTEMPTS_IN_MS = 50;
export declare const DEFAULT_TIMEOUT_IN_MS = 5000;
export declare const WAIT_FOREVER: number;
export declare const waitUntil: <T extends PredicateReturnValue>(predicate: Predicate<T>, options?: number | Options | undefined, intervalBetweenAttempts?: number | undefined) => Promise<T>;
export declare type Predicate<T extends PredicateReturnValue> = () => T | Promise<T>;
export declare type FalsyValue = null | undefined | false | '' | 0 | void;
export declare type TruthyValue = Record<string, unknown> | unknown[] | symbol | ((...args: unknown[]) => unknown) | Exclude<number, 0> | Exclude<string, ''> | true;
export declare type PredicateReturnValue = TruthyValue | FalsyValue;
export declare type Options = {
    timeout?: number;
    intervalBetweenAttempts?: number;
};
export default waitUntil;

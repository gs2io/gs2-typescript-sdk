import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2Money2RestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    getServiceVersion(request: Request.GetServiceVersionRequest): Promise<Result.GetServiceVersionResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    prepareImportUserDataByUserId(request: Request.PrepareImportUserDataByUserIdRequest): Promise<Result.PrepareImportUserDataByUserIdResult>;
    importUserDataByUserId(request: Request.ImportUserDataByUserIdRequest): Promise<Result.ImportUserDataByUserIdResult>;
    checkImportUserDataByUserId(request: Request.CheckImportUserDataByUserIdRequest): Promise<Result.CheckImportUserDataByUserIdResult>;
    describeWallets(request: Request.DescribeWalletsRequest): Promise<Result.DescribeWalletsResult>;
    describeWalletsByUserId(request: Request.DescribeWalletsByUserIdRequest): Promise<Result.DescribeWalletsByUserIdResult>;
    getWallet(request: Request.GetWalletRequest): Promise<Result.GetWalletResult>;
    getWalletByUserId(request: Request.GetWalletByUserIdRequest): Promise<Result.GetWalletByUserIdResult>;
    depositByUserId(request: Request.DepositByUserIdRequest): Promise<Result.DepositByUserIdResult>;
    withdraw(request: Request.WithdrawRequest): Promise<Result.WithdrawResult>;
    withdrawByUserId(request: Request.WithdrawByUserIdRequest): Promise<Result.WithdrawByUserIdResult>;
    depositByStampSheet(request: Request.DepositByStampSheetRequest): Promise<Result.DepositByStampSheetResult>;
    withdrawByStampTask(request: Request.WithdrawByStampTaskRequest): Promise<Result.WithdrawByStampTaskResult>;
    describeEventsByUserId(request: Request.DescribeEventsByUserIdRequest): Promise<Result.DescribeEventsByUserIdResult>;
    getEventByTransactionId(request: Request.GetEventByTransactionIdRequest): Promise<Result.GetEventByTransactionIdResult>;
    verifyReceipt(request: Request.VerifyReceiptRequest): Promise<Result.VerifyReceiptResult>;
    verifyReceiptByUserId(request: Request.VerifyReceiptByUserIdRequest): Promise<Result.VerifyReceiptByUserIdResult>;
    verifyReceiptByStampTask(request: Request.VerifyReceiptByStampTaskRequest): Promise<Result.VerifyReceiptByStampTaskResult>;
    describeSubscriptionStatuses(request: Request.DescribeSubscriptionStatusesRequest): Promise<Result.DescribeSubscriptionStatusesResult>;
    describeSubscriptionStatusesByUserId(request: Request.DescribeSubscriptionStatusesByUserIdRequest): Promise<Result.DescribeSubscriptionStatusesByUserIdResult>;
    getSubscriptionStatus(request: Request.GetSubscriptionStatusRequest): Promise<Result.GetSubscriptionStatusResult>;
    getSubscriptionStatusByUserId(request: Request.GetSubscriptionStatusByUserIdRequest): Promise<Result.GetSubscriptionStatusByUserIdResult>;
    allocateSubscriptionStatus(request: Request.AllocateSubscriptionStatusRequest): Promise<Result.AllocateSubscriptionStatusResult>;
    allocateSubscriptionStatusByUserId(request: Request.AllocateSubscriptionStatusByUserIdRequest): Promise<Result.AllocateSubscriptionStatusByUserIdResult>;
    takeoverSubscriptionStatus(request: Request.TakeoverSubscriptionStatusRequest): Promise<Result.TakeoverSubscriptionStatusResult>;
    takeoverSubscriptionStatusByUserId(request: Request.TakeoverSubscriptionStatusByUserIdRequest): Promise<Result.TakeoverSubscriptionStatusByUserIdResult>;
    describeRefundHistoriesByUserId(request: Request.DescribeRefundHistoriesByUserIdRequest): Promise<Result.DescribeRefundHistoriesByUserIdResult>;
    describeRefundHistoriesByDate(request: Request.DescribeRefundHistoriesByDateRequest): Promise<Result.DescribeRefundHistoriesByDateResult>;
    getRefundHistory(request: Request.GetRefundHistoryRequest): Promise<Result.GetRefundHistoryResult>;
    describeStoreContentModels(request: Request.DescribeStoreContentModelsRequest): Promise<Result.DescribeStoreContentModelsResult>;
    getStoreContentModel(request: Request.GetStoreContentModelRequest): Promise<Result.GetStoreContentModelResult>;
    describeStoreContentModelMasters(request: Request.DescribeStoreContentModelMastersRequest): Promise<Result.DescribeStoreContentModelMastersResult>;
    createStoreContentModelMaster(request: Request.CreateStoreContentModelMasterRequest): Promise<Result.CreateStoreContentModelMasterResult>;
    getStoreContentModelMaster(request: Request.GetStoreContentModelMasterRequest): Promise<Result.GetStoreContentModelMasterResult>;
    updateStoreContentModelMaster(request: Request.UpdateStoreContentModelMasterRequest): Promise<Result.UpdateStoreContentModelMasterResult>;
    deleteStoreContentModelMaster(request: Request.DeleteStoreContentModelMasterRequest): Promise<Result.DeleteStoreContentModelMasterResult>;
    describeStoreSubscriptionContentModels(request: Request.DescribeStoreSubscriptionContentModelsRequest): Promise<Result.DescribeStoreSubscriptionContentModelsResult>;
    getStoreSubscriptionContentModel(request: Request.GetStoreSubscriptionContentModelRequest): Promise<Result.GetStoreSubscriptionContentModelResult>;
    describeStoreSubscriptionContentModelMasters(request: Request.DescribeStoreSubscriptionContentModelMastersRequest): Promise<Result.DescribeStoreSubscriptionContentModelMastersResult>;
    createStoreSubscriptionContentModelMaster(request: Request.CreateStoreSubscriptionContentModelMasterRequest): Promise<Result.CreateStoreSubscriptionContentModelMasterResult>;
    getStoreSubscriptionContentModelMaster(request: Request.GetStoreSubscriptionContentModelMasterRequest): Promise<Result.GetStoreSubscriptionContentModelMasterResult>;
    updateStoreSubscriptionContentModelMaster(request: Request.UpdateStoreSubscriptionContentModelMasterRequest): Promise<Result.UpdateStoreSubscriptionContentModelMasterResult>;
    deleteStoreSubscriptionContentModelMaster(request: Request.DeleteStoreSubscriptionContentModelMasterRequest): Promise<Result.DeleteStoreSubscriptionContentModelMasterResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentModelMaster(request: Request.GetCurrentModelMasterRequest): Promise<Result.GetCurrentModelMasterResult>;
    preUpdateCurrentModelMaster(request: Request.PreUpdateCurrentModelMasterRequest): Promise<Result.PreUpdateCurrentModelMasterResult>;
    updateCurrentModelMaster(request: Request.UpdateCurrentModelMasterRequest): Promise<Result.UpdateCurrentModelMasterResult>;
    updateCurrentModelMasterFromGitHub(request: Request.UpdateCurrentModelMasterFromGitHubRequest): Promise<Result.UpdateCurrentModelMasterFromGitHubResult>;
    describeDailyTransactionHistoriesByCurrency(request: Request.DescribeDailyTransactionHistoriesByCurrencyRequest): Promise<Result.DescribeDailyTransactionHistoriesByCurrencyResult>;
    describeDailyTransactionHistories(request: Request.DescribeDailyTransactionHistoriesRequest): Promise<Result.DescribeDailyTransactionHistoriesResult>;
    getDailyTransactionHistory(request: Request.GetDailyTransactionHistoryRequest): Promise<Result.GetDailyTransactionHistoryResult>;
    describeUnusedBalances(request: Request.DescribeUnusedBalancesRequest): Promise<Result.DescribeUnusedBalancesResult>;
    getUnusedBalance(request: Request.GetUnusedBalanceRequest): Promise<Result.GetUnusedBalanceResult>;
}

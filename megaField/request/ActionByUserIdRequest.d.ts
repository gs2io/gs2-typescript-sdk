import IRequest from '../../core/interface/IRequest';
import * as Gs2MegaField from '../model';
export default class ActionByUserIdRequest implements IRequest {
    private requestId;
    private contextStack;
    private namespaceName;
    private userId;
    private areaModelName;
    private layerModelName;
    private position;
    private scopes;
    private timeOffsetToken;
    private duplicationAvoider;
    getRequestId(): string | null;
    setRequestId(requestId: string | null): this;
    withRequestId(requestId: string | null): this;
    getContextStack(): string | null;
    setContextStack(contextStack: string | null): this;
    withContextStack(contextStack: string | null): this;
    getNamespaceName(): string | null;
    setNamespaceName(namespaceName: string | null): this;
    withNamespaceName(namespaceName: string | null): this;
    getUserId(): string | null;
    setUserId(userId: string | null): this;
    withUserId(userId: string | null): this;
    getAreaModelName(): string | null;
    setAreaModelName(areaModelName: string | null): this;
    withAreaModelName(areaModelName: string | null): this;
    getLayerModelName(): string | null;
    setLayerModelName(layerModelName: string | null): this;
    withLayerModelName(layerModelName: string | null): this;
    getPosition(): Gs2MegaField.MyPosition | null;
    setPosition(position: Gs2MegaField.MyPosition | null): this;
    withPosition(position: Gs2MegaField.MyPosition | null): this;
    getScopes(): Gs2MegaField.Scope[] | null;
    setScopes(scopes: Gs2MegaField.Scope[] | null): this;
    withScopes(scopes: Gs2MegaField.Scope[] | null): this;
    getTimeOffsetToken(): string | null;
    setTimeOffsetToken(timeOffsetToken: string | null): this;
    withTimeOffsetToken(timeOffsetToken: string | null): this;
    getDuplicationAvoider(): string | null;
    setDuplicationAvoider(duplicationAvoider: string | null): this;
    withDuplicationAvoider(duplicationAvoider: string | null): this;
    static fromDict(data: {
        [key: string]: any;
    }): ActionByUserIdRequest;
    toDict(): {
        [key: string]: any;
    };
}

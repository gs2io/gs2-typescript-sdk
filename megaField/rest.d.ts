import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2MegaFieldRestClient extends AbstractGs2RestClient {
    static ENDPOINT_HOST: string | null;
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    getServiceVersion(request: Request.GetServiceVersionRequest): Promise<Result.GetServiceVersionResult>;
    describeAreaModels(request: Request.DescribeAreaModelsRequest): Promise<Result.DescribeAreaModelsResult>;
    getAreaModel(request: Request.GetAreaModelRequest): Promise<Result.GetAreaModelResult>;
    describeAreaModelMasters(request: Request.DescribeAreaModelMastersRequest): Promise<Result.DescribeAreaModelMastersResult>;
    createAreaModelMaster(request: Request.CreateAreaModelMasterRequest): Promise<Result.CreateAreaModelMasterResult>;
    getAreaModelMaster(request: Request.GetAreaModelMasterRequest): Promise<Result.GetAreaModelMasterResult>;
    updateAreaModelMaster(request: Request.UpdateAreaModelMasterRequest): Promise<Result.UpdateAreaModelMasterResult>;
    deleteAreaModelMaster(request: Request.DeleteAreaModelMasterRequest): Promise<Result.DeleteAreaModelMasterResult>;
    describeLayerModels(request: Request.DescribeLayerModelsRequest): Promise<Result.DescribeLayerModelsResult>;
    getLayerModel(request: Request.GetLayerModelRequest): Promise<Result.GetLayerModelResult>;
    describeLayerModelMasters(request: Request.DescribeLayerModelMastersRequest): Promise<Result.DescribeLayerModelMastersResult>;
    createLayerModelMaster(request: Request.CreateLayerModelMasterRequest): Promise<Result.CreateLayerModelMasterResult>;
    getLayerModelMaster(request: Request.GetLayerModelMasterRequest): Promise<Result.GetLayerModelMasterResult>;
    updateLayerModelMaster(request: Request.UpdateLayerModelMasterRequest): Promise<Result.UpdateLayerModelMasterResult>;
    deleteLayerModelMaster(request: Request.DeleteLayerModelMasterRequest): Promise<Result.DeleteLayerModelMasterResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentFieldMaster(request: Request.GetCurrentFieldMasterRequest): Promise<Result.GetCurrentFieldMasterResult>;
    preUpdateCurrentFieldMaster(request: Request.PreUpdateCurrentFieldMasterRequest): Promise<Result.PreUpdateCurrentFieldMasterResult>;
    updateCurrentFieldMaster(request: Request.UpdateCurrentFieldMasterRequest): Promise<Result.UpdateCurrentFieldMasterResult>;
    updateCurrentFieldMasterFromGitHub(request: Request.UpdateCurrentFieldMasterFromGitHubRequest): Promise<Result.UpdateCurrentFieldMasterFromGitHubResult>;
    putPosition(request: Request.PutPositionRequest): Promise<Result.PutPositionResult>;
    putPositionByUserId(request: Request.PutPositionByUserIdRequest): Promise<Result.PutPositionByUserIdResult>;
    fetchPosition(request: Request.FetchPositionRequest): Promise<Result.FetchPositionResult>;
    fetchPositionFromSystem(request: Request.FetchPositionFromSystemRequest): Promise<Result.FetchPositionFromSystemResult>;
    nearUserIds(request: Request.NearUserIdsRequest): Promise<Result.NearUserIdsResult>;
    nearUserIdsFromSystem(request: Request.NearUserIdsFromSystemRequest): Promise<Result.NearUserIdsFromSystemResult>;
    action(request: Request.ActionRequest): Promise<Result.ActionResult>;
    actionByUserId(request: Request.ActionByUserIdRequest): Promise<Result.ActionByUserIdResult>;
}

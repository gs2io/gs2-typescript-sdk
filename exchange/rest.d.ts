import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2ExchangeRestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    prepareImportUserDataByUserId(request: Request.PrepareImportUserDataByUserIdRequest): Promise<Result.PrepareImportUserDataByUserIdResult>;
    importUserDataByUserId(request: Request.ImportUserDataByUserIdRequest): Promise<Result.ImportUserDataByUserIdResult>;
    checkImportUserDataByUserId(request: Request.CheckImportUserDataByUserIdRequest): Promise<Result.CheckImportUserDataByUserIdResult>;
    describeRateModels(request: Request.DescribeRateModelsRequest): Promise<Result.DescribeRateModelsResult>;
    getRateModel(request: Request.GetRateModelRequest): Promise<Result.GetRateModelResult>;
    describeRateModelMasters(request: Request.DescribeRateModelMastersRequest): Promise<Result.DescribeRateModelMastersResult>;
    createRateModelMaster(request: Request.CreateRateModelMasterRequest): Promise<Result.CreateRateModelMasterResult>;
    getRateModelMaster(request: Request.GetRateModelMasterRequest): Promise<Result.GetRateModelMasterResult>;
    updateRateModelMaster(request: Request.UpdateRateModelMasterRequest): Promise<Result.UpdateRateModelMasterResult>;
    deleteRateModelMaster(request: Request.DeleteRateModelMasterRequest): Promise<Result.DeleteRateModelMasterResult>;
    describeIncrementalRateModels(request: Request.DescribeIncrementalRateModelsRequest): Promise<Result.DescribeIncrementalRateModelsResult>;
    getIncrementalRateModel(request: Request.GetIncrementalRateModelRequest): Promise<Result.GetIncrementalRateModelResult>;
    describeIncrementalRateModelMasters(request: Request.DescribeIncrementalRateModelMastersRequest): Promise<Result.DescribeIncrementalRateModelMastersResult>;
    createIncrementalRateModelMaster(request: Request.CreateIncrementalRateModelMasterRequest): Promise<Result.CreateIncrementalRateModelMasterResult>;
    getIncrementalRateModelMaster(request: Request.GetIncrementalRateModelMasterRequest): Promise<Result.GetIncrementalRateModelMasterResult>;
    updateIncrementalRateModelMaster(request: Request.UpdateIncrementalRateModelMasterRequest): Promise<Result.UpdateIncrementalRateModelMasterResult>;
    deleteIncrementalRateModelMaster(request: Request.DeleteIncrementalRateModelMasterRequest): Promise<Result.DeleteIncrementalRateModelMasterResult>;
    exchange(request: Request.ExchangeRequest): Promise<Result.ExchangeResult>;
    exchangeByUserId(request: Request.ExchangeByUserIdRequest): Promise<Result.ExchangeByUserIdResult>;
    exchangeByStampSheet(request: Request.ExchangeByStampSheetRequest): Promise<Result.ExchangeByStampSheetResult>;
    incrementalExchange(request: Request.IncrementalExchangeRequest): Promise<Result.IncrementalExchangeResult>;
    incrementalExchangeByUserId(request: Request.IncrementalExchangeByUserIdRequest): Promise<Result.IncrementalExchangeByUserIdResult>;
    incrementalExchangeByStampSheet(request: Request.IncrementalExchangeByStampSheetRequest): Promise<Result.IncrementalExchangeByStampSheetResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentRateMaster(request: Request.GetCurrentRateMasterRequest): Promise<Result.GetCurrentRateMasterResult>;
    updateCurrentRateMaster(request: Request.UpdateCurrentRateMasterRequest): Promise<Result.UpdateCurrentRateMasterResult>;
    updateCurrentRateMasterFromGitHub(request: Request.UpdateCurrentRateMasterFromGitHubRequest): Promise<Result.UpdateCurrentRateMasterFromGitHubResult>;
    createAwaitByUserId(request: Request.CreateAwaitByUserIdRequest): Promise<Result.CreateAwaitByUserIdResult>;
    describeAwaits(request: Request.DescribeAwaitsRequest): Promise<Result.DescribeAwaitsResult>;
    describeAwaitsByUserId(request: Request.DescribeAwaitsByUserIdRequest): Promise<Result.DescribeAwaitsByUserIdResult>;
    getAwait(request: Request.GetAwaitRequest): Promise<Result.GetAwaitResult>;
    getAwaitByUserId(request: Request.GetAwaitByUserIdRequest): Promise<Result.GetAwaitByUserIdResult>;
    acquire(request: Request.AcquireRequest): Promise<Result.AcquireResult>;
    acquireByUserId(request: Request.AcquireByUserIdRequest): Promise<Result.AcquireByUserIdResult>;
    acquireForceByUserId(request: Request.AcquireForceByUserIdRequest): Promise<Result.AcquireForceByUserIdResult>;
    skipByUserId(request: Request.SkipByUserIdRequest): Promise<Result.SkipByUserIdResult>;
    deleteAwait(request: Request.DeleteAwaitRequest): Promise<Result.DeleteAwaitResult>;
    deleteAwaitByUserId(request: Request.DeleteAwaitByUserIdRequest): Promise<Result.DeleteAwaitByUserIdResult>;
    createAwaitByStampSheet(request: Request.CreateAwaitByStampSheetRequest): Promise<Result.CreateAwaitByStampSheetResult>;
    skipByStampSheet(request: Request.SkipByStampSheetRequest): Promise<Result.SkipByStampSheetResult>;
    deleteAwaitByStampTask(request: Request.DeleteAwaitByStampTaskRequest): Promise<Result.DeleteAwaitByStampTaskResult>;
}

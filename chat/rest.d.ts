import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2ChatRestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    getServiceVersion(request: Request.GetServiceVersionRequest): Promise<Result.GetServiceVersionResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    prepareImportUserDataByUserId(request: Request.PrepareImportUserDataByUserIdRequest): Promise<Result.PrepareImportUserDataByUserIdResult>;
    importUserDataByUserId(request: Request.ImportUserDataByUserIdRequest): Promise<Result.ImportUserDataByUserIdResult>;
    checkImportUserDataByUserId(request: Request.CheckImportUserDataByUserIdRequest): Promise<Result.CheckImportUserDataByUserIdResult>;
    describeRooms(request: Request.DescribeRoomsRequest): Promise<Result.DescribeRoomsResult>;
    createRoom(request: Request.CreateRoomRequest): Promise<Result.CreateRoomResult>;
    createRoomFromBackend(request: Request.CreateRoomFromBackendRequest): Promise<Result.CreateRoomFromBackendResult>;
    getRoom(request: Request.GetRoomRequest): Promise<Result.GetRoomResult>;
    updateRoom(request: Request.UpdateRoomRequest): Promise<Result.UpdateRoomResult>;
    updateRoomFromBackend(request: Request.UpdateRoomFromBackendRequest): Promise<Result.UpdateRoomFromBackendResult>;
    deleteRoom(request: Request.DeleteRoomRequest): Promise<Result.DeleteRoomResult>;
    deleteRoomFromBackend(request: Request.DeleteRoomFromBackendRequest): Promise<Result.DeleteRoomFromBackendResult>;
    describeMessages(request: Request.DescribeMessagesRequest): Promise<Result.DescribeMessagesResult>;
    describeMessagesByUserId(request: Request.DescribeMessagesByUserIdRequest): Promise<Result.DescribeMessagesByUserIdResult>;
    describeLatestMessages(request: Request.DescribeLatestMessagesRequest): Promise<Result.DescribeLatestMessagesResult>;
    describeLatestMessagesByUserId(request: Request.DescribeLatestMessagesByUserIdRequest): Promise<Result.DescribeLatestMessagesByUserIdResult>;
    post(request: Request.PostRequest): Promise<Result.PostResult>;
    postByUserId(request: Request.PostByUserIdRequest): Promise<Result.PostByUserIdResult>;
    getMessage(request: Request.GetMessageRequest): Promise<Result.GetMessageResult>;
    getMessageByUserId(request: Request.GetMessageByUserIdRequest): Promise<Result.GetMessageByUserIdResult>;
    deleteMessage(request: Request.DeleteMessageRequest): Promise<Result.DeleteMessageResult>;
    describeSubscribes(request: Request.DescribeSubscribesRequest): Promise<Result.DescribeSubscribesResult>;
    describeSubscribesByUserId(request: Request.DescribeSubscribesByUserIdRequest): Promise<Result.DescribeSubscribesByUserIdResult>;
    describeSubscribesByRoomName(request: Request.DescribeSubscribesByRoomNameRequest): Promise<Result.DescribeSubscribesByRoomNameResult>;
    subscribe(request: Request.SubscribeRequest): Promise<Result.SubscribeResult>;
    subscribeByUserId(request: Request.SubscribeByUserIdRequest): Promise<Result.SubscribeByUserIdResult>;
    getSubscribe(request: Request.GetSubscribeRequest): Promise<Result.GetSubscribeResult>;
    getSubscribeByUserId(request: Request.GetSubscribeByUserIdRequest): Promise<Result.GetSubscribeByUserIdResult>;
    updateNotificationType(request: Request.UpdateNotificationTypeRequest): Promise<Result.UpdateNotificationTypeResult>;
    updateNotificationTypeByUserId(request: Request.UpdateNotificationTypeByUserIdRequest): Promise<Result.UpdateNotificationTypeByUserIdResult>;
    unsubscribe(request: Request.UnsubscribeRequest): Promise<Result.UnsubscribeResult>;
    unsubscribeByUserId(request: Request.UnsubscribeByUserIdRequest): Promise<Result.UnsubscribeByUserIdResult>;
}

import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2SeasonRatingRestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    prepareImportUserDataByUserId(request: Request.PrepareImportUserDataByUserIdRequest): Promise<Result.PrepareImportUserDataByUserIdResult>;
    importUserDataByUserId(request: Request.ImportUserDataByUserIdRequest): Promise<Result.ImportUserDataByUserIdResult>;
    checkImportUserDataByUserId(request: Request.CheckImportUserDataByUserIdRequest): Promise<Result.CheckImportUserDataByUserIdResult>;
    describeMatchSessions(request: Request.DescribeMatchSessionsRequest): Promise<Result.DescribeMatchSessionsResult>;
    createMatchSession(request: Request.CreateMatchSessionRequest): Promise<Result.CreateMatchSessionResult>;
    getMatchSession(request: Request.GetMatchSessionRequest): Promise<Result.GetMatchSessionResult>;
    deleteMatchSession(request: Request.DeleteMatchSessionRequest): Promise<Result.DeleteMatchSessionResult>;
    describeSeasonModelMasters(request: Request.DescribeSeasonModelMastersRequest): Promise<Result.DescribeSeasonModelMastersResult>;
    createSeasonModelMaster(request: Request.CreateSeasonModelMasterRequest): Promise<Result.CreateSeasonModelMasterResult>;
    getSeasonModelMaster(request: Request.GetSeasonModelMasterRequest): Promise<Result.GetSeasonModelMasterResult>;
    updateSeasonModelMaster(request: Request.UpdateSeasonModelMasterRequest): Promise<Result.UpdateSeasonModelMasterResult>;
    deleteSeasonModelMaster(request: Request.DeleteSeasonModelMasterRequest): Promise<Result.DeleteSeasonModelMasterResult>;
    describeSeasonModels(request: Request.DescribeSeasonModelsRequest): Promise<Result.DescribeSeasonModelsResult>;
    getSeasonModel(request: Request.GetSeasonModelRequest): Promise<Result.GetSeasonModelResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentSeasonModelMaster(request: Request.GetCurrentSeasonModelMasterRequest): Promise<Result.GetCurrentSeasonModelMasterResult>;
    updateCurrentSeasonModelMaster(request: Request.UpdateCurrentSeasonModelMasterRequest): Promise<Result.UpdateCurrentSeasonModelMasterResult>;
    updateCurrentSeasonModelMasterFromGitHub(request: Request.UpdateCurrentSeasonModelMasterFromGitHubRequest): Promise<Result.UpdateCurrentSeasonModelMasterFromGitHubResult>;
    getBallot(request: Request.GetBallotRequest): Promise<Result.GetBallotResult>;
    getBallotByUserId(request: Request.GetBallotByUserIdRequest): Promise<Result.GetBallotByUserIdResult>;
    vote(request: Request.VoteRequest): Promise<Result.VoteResult>;
    voteMultiple(request: Request.VoteMultipleRequest): Promise<Result.VoteMultipleResult>;
    commitVote(request: Request.CommitVoteRequest): Promise<Result.CommitVoteResult>;
}

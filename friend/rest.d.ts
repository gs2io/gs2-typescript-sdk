import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2FriendRestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    getProfile(request: Request.GetProfileRequest): Promise<Result.GetProfileResult>;
    getProfileByUserId(request: Request.GetProfileByUserIdRequest): Promise<Result.GetProfileByUserIdResult>;
    updateProfile(request: Request.UpdateProfileRequest): Promise<Result.UpdateProfileResult>;
    updateProfileByUserId(request: Request.UpdateProfileByUserIdRequest): Promise<Result.UpdateProfileByUserIdResult>;
    deleteProfileByUserId(request: Request.DeleteProfileByUserIdRequest): Promise<Result.DeleteProfileByUserIdResult>;
    describeFriends(request: Request.DescribeFriendsRequest): Promise<Result.DescribeFriendsResult>;
    describeFriendsByUserId(request: Request.DescribeFriendsByUserIdRequest): Promise<Result.DescribeFriendsByUserIdResult>;
    describeBlackList(request: Request.DescribeBlackListRequest): Promise<Result.DescribeBlackListResult>;
    describeBlackListByUserId(request: Request.DescribeBlackListByUserIdRequest): Promise<Result.DescribeBlackListByUserIdResult>;
    registerBlackList(request: Request.RegisterBlackListRequest): Promise<Result.RegisterBlackListResult>;
    registerBlackListByUserId(request: Request.RegisterBlackListByUserIdRequest): Promise<Result.RegisterBlackListByUserIdResult>;
    unregisterBlackList(request: Request.UnregisterBlackListRequest): Promise<Result.UnregisterBlackListResult>;
    unregisterBlackListByUserId(request: Request.UnregisterBlackListByUserIdRequest): Promise<Result.UnregisterBlackListByUserIdResult>;
    describeFollows(request: Request.DescribeFollowsRequest): Promise<Result.DescribeFollowsResult>;
    describeFollowsByUserId(request: Request.DescribeFollowsByUserIdRequest): Promise<Result.DescribeFollowsByUserIdResult>;
    getFollow(request: Request.GetFollowRequest): Promise<Result.GetFollowResult>;
    getFollowByUserId(request: Request.GetFollowByUserIdRequest): Promise<Result.GetFollowByUserIdResult>;
    follow(request: Request.FollowRequest): Promise<Result.FollowResult>;
    followByUserId(request: Request.FollowByUserIdRequest): Promise<Result.FollowByUserIdResult>;
    unfollow(request: Request.UnfollowRequest): Promise<Result.UnfollowResult>;
    unfollowByUserId(request: Request.UnfollowByUserIdRequest): Promise<Result.UnfollowByUserIdResult>;
    getFriend(request: Request.GetFriendRequest): Promise<Result.GetFriendResult>;
    getFriendByUserId(request: Request.GetFriendByUserIdRequest): Promise<Result.GetFriendByUserIdResult>;
    deleteFriend(request: Request.DeleteFriendRequest): Promise<Result.DeleteFriendResult>;
    deleteFriendByUserId(request: Request.DeleteFriendByUserIdRequest): Promise<Result.DeleteFriendByUserIdResult>;
    describeSendRequests(request: Request.DescribeSendRequestsRequest): Promise<Result.DescribeSendRequestsResult>;
    describeSendRequestsByUserId(request: Request.DescribeSendRequestsByUserIdRequest): Promise<Result.DescribeSendRequestsByUserIdResult>;
    getSendRequest(request: Request.GetSendRequestRequest): Promise<Result.GetSendRequestResult>;
    getSendRequestByUserId(request: Request.GetSendRequestByUserIdRequest): Promise<Result.GetSendRequestByUserIdResult>;
    sendRequest(request: Request.SendRequestRequest): Promise<Result.SendRequestResult>;
    sendRequestByUserId(request: Request.SendRequestByUserIdRequest): Promise<Result.SendRequestByUserIdResult>;
    deleteRequest(request: Request.DeleteRequestRequest): Promise<Result.DeleteRequestResult>;
    deleteRequestByUserId(request: Request.DeleteRequestByUserIdRequest): Promise<Result.DeleteRequestByUserIdResult>;
    describeReceiveRequests(request: Request.DescribeReceiveRequestsRequest): Promise<Result.DescribeReceiveRequestsResult>;
    describeReceiveRequestsByUserId(request: Request.DescribeReceiveRequestsByUserIdRequest): Promise<Result.DescribeReceiveRequestsByUserIdResult>;
    getReceiveRequest(request: Request.GetReceiveRequestRequest): Promise<Result.GetReceiveRequestResult>;
    getReceiveRequestByUserId(request: Request.GetReceiveRequestByUserIdRequest): Promise<Result.GetReceiveRequestByUserIdResult>;
    acceptRequest(request: Request.AcceptRequestRequest): Promise<Result.AcceptRequestResult>;
    acceptRequestByUserId(request: Request.AcceptRequestByUserIdRequest): Promise<Result.AcceptRequestByUserIdResult>;
    rejectRequest(request: Request.RejectRequestRequest): Promise<Result.RejectRequestResult>;
    rejectRequestByUserId(request: Request.RejectRequestByUserIdRequest): Promise<Result.RejectRequestByUserIdResult>;
    getPublicProfile(request: Request.GetPublicProfileRequest): Promise<Result.GetPublicProfileResult>;
}

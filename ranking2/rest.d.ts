import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2Ranking2RestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    prepareImportUserDataByUserId(request: Request.PrepareImportUserDataByUserIdRequest): Promise<Result.PrepareImportUserDataByUserIdResult>;
    importUserDataByUserId(request: Request.ImportUserDataByUserIdRequest): Promise<Result.ImportUserDataByUserIdResult>;
    checkImportUserDataByUserId(request: Request.CheckImportUserDataByUserIdRequest): Promise<Result.CheckImportUserDataByUserIdResult>;
    describeGlobalRankingModels(request: Request.DescribeGlobalRankingModelsRequest): Promise<Result.DescribeGlobalRankingModelsResult>;
    getGlobalRankingModel(request: Request.GetGlobalRankingModelRequest): Promise<Result.GetGlobalRankingModelResult>;
    describeGlobalRankingModelMasters(request: Request.DescribeGlobalRankingModelMastersRequest): Promise<Result.DescribeGlobalRankingModelMastersResult>;
    createGlobalRankingModelMaster(request: Request.CreateGlobalRankingModelMasterRequest): Promise<Result.CreateGlobalRankingModelMasterResult>;
    getGlobalRankingModelMaster(request: Request.GetGlobalRankingModelMasterRequest): Promise<Result.GetGlobalRankingModelMasterResult>;
    updateGlobalRankingModelMaster(request: Request.UpdateGlobalRankingModelMasterRequest): Promise<Result.UpdateGlobalRankingModelMasterResult>;
    deleteGlobalRankingModelMaster(request: Request.DeleteGlobalRankingModelMasterRequest): Promise<Result.DeleteGlobalRankingModelMasterResult>;
    describeGlobalRankingScores(request: Request.DescribeGlobalRankingScoresRequest): Promise<Result.DescribeGlobalRankingScoresResult>;
    describeGlobalRankingScoresByUserId(request: Request.DescribeGlobalRankingScoresByUserIdRequest): Promise<Result.DescribeGlobalRankingScoresByUserIdResult>;
    putGlobalRankingScore(request: Request.PutGlobalRankingScoreRequest): Promise<Result.PutGlobalRankingScoreResult>;
    putGlobalRankingScoreByUserId(request: Request.PutGlobalRankingScoreByUserIdRequest): Promise<Result.PutGlobalRankingScoreByUserIdResult>;
    getGlobalRankingScore(request: Request.GetGlobalRankingScoreRequest): Promise<Result.GetGlobalRankingScoreResult>;
    getGlobalRankingScoreByUserId(request: Request.GetGlobalRankingScoreByUserIdRequest): Promise<Result.GetGlobalRankingScoreByUserIdResult>;
    deleteGlobalRankingScoreByUserId(request: Request.DeleteGlobalRankingScoreByUserIdRequest): Promise<Result.DeleteGlobalRankingScoreByUserIdResult>;
    verifyGlobalRankingScore(request: Request.VerifyGlobalRankingScoreRequest): Promise<Result.VerifyGlobalRankingScoreResult>;
    verifyGlobalRankingScoreByUserId(request: Request.VerifyGlobalRankingScoreByUserIdRequest): Promise<Result.VerifyGlobalRankingScoreByUserIdResult>;
    verifyGlobalRankingScoreByStampTask(request: Request.VerifyGlobalRankingScoreByStampTaskRequest): Promise<Result.VerifyGlobalRankingScoreByStampTaskResult>;
    describeGlobalRankingReceivedRewards(request: Request.DescribeGlobalRankingReceivedRewardsRequest): Promise<Result.DescribeGlobalRankingReceivedRewardsResult>;
    describeGlobalRankingReceivedRewardsByUserId(request: Request.DescribeGlobalRankingReceivedRewardsByUserIdRequest): Promise<Result.DescribeGlobalRankingReceivedRewardsByUserIdResult>;
    createGlobalRankingReceivedReward(request: Request.CreateGlobalRankingReceivedRewardRequest): Promise<Result.CreateGlobalRankingReceivedRewardResult>;
    createGlobalRankingReceivedRewardByUserId(request: Request.CreateGlobalRankingReceivedRewardByUserIdRequest): Promise<Result.CreateGlobalRankingReceivedRewardByUserIdResult>;
    receiveGlobalRankingReceivedReward(request: Request.ReceiveGlobalRankingReceivedRewardRequest): Promise<Result.ReceiveGlobalRankingReceivedRewardResult>;
    receiveGlobalRankingReceivedRewardByUserId(request: Request.ReceiveGlobalRankingReceivedRewardByUserIdRequest): Promise<Result.ReceiveGlobalRankingReceivedRewardByUserIdResult>;
    getGlobalRankingReceivedReward(request: Request.GetGlobalRankingReceivedRewardRequest): Promise<Result.GetGlobalRankingReceivedRewardResult>;
    getGlobalRankingReceivedRewardByUserId(request: Request.GetGlobalRankingReceivedRewardByUserIdRequest): Promise<Result.GetGlobalRankingReceivedRewardByUserIdResult>;
    deleteGlobalRankingReceivedRewardByUserId(request: Request.DeleteGlobalRankingReceivedRewardByUserIdRequest): Promise<Result.DeleteGlobalRankingReceivedRewardByUserIdResult>;
    createGlobalRankingReceivedRewardByStampTask(request: Request.CreateGlobalRankingReceivedRewardByStampTaskRequest): Promise<Result.CreateGlobalRankingReceivedRewardByStampTaskResult>;
    describeGlobalRankings(request: Request.DescribeGlobalRankingsRequest): Promise<Result.DescribeGlobalRankingsResult>;
    describeGlobalRankingsByUserId(request: Request.DescribeGlobalRankingsByUserIdRequest): Promise<Result.DescribeGlobalRankingsByUserIdResult>;
    getGlobalRanking(request: Request.GetGlobalRankingRequest): Promise<Result.GetGlobalRankingResult>;
    getGlobalRankingByUserId(request: Request.GetGlobalRankingByUserIdRequest): Promise<Result.GetGlobalRankingByUserIdResult>;
    describeClusterRankingModels(request: Request.DescribeClusterRankingModelsRequest): Promise<Result.DescribeClusterRankingModelsResult>;
    getClusterRankingModel(request: Request.GetClusterRankingModelRequest): Promise<Result.GetClusterRankingModelResult>;
    describeClusterRankingModelMasters(request: Request.DescribeClusterRankingModelMastersRequest): Promise<Result.DescribeClusterRankingModelMastersResult>;
    createClusterRankingModelMaster(request: Request.CreateClusterRankingModelMasterRequest): Promise<Result.CreateClusterRankingModelMasterResult>;
    getClusterRankingModelMaster(request: Request.GetClusterRankingModelMasterRequest): Promise<Result.GetClusterRankingModelMasterResult>;
    updateClusterRankingModelMaster(request: Request.UpdateClusterRankingModelMasterRequest): Promise<Result.UpdateClusterRankingModelMasterResult>;
    deleteClusterRankingModelMaster(request: Request.DeleteClusterRankingModelMasterRequest): Promise<Result.DeleteClusterRankingModelMasterResult>;
    describeClusterRankingScores(request: Request.DescribeClusterRankingScoresRequest): Promise<Result.DescribeClusterRankingScoresResult>;
    describeClusterRankingScoresByUserId(request: Request.DescribeClusterRankingScoresByUserIdRequest): Promise<Result.DescribeClusterRankingScoresByUserIdResult>;
    putClusterRankingScore(request: Request.PutClusterRankingScoreRequest): Promise<Result.PutClusterRankingScoreResult>;
    putClusterRankingScoreByUserId(request: Request.PutClusterRankingScoreByUserIdRequest): Promise<Result.PutClusterRankingScoreByUserIdResult>;
    getClusterRankingScore(request: Request.GetClusterRankingScoreRequest): Promise<Result.GetClusterRankingScoreResult>;
    getClusterRankingScoreByUserId(request: Request.GetClusterRankingScoreByUserIdRequest): Promise<Result.GetClusterRankingScoreByUserIdResult>;
    deleteClusterRankingScoreByUserId(request: Request.DeleteClusterRankingScoreByUserIdRequest): Promise<Result.DeleteClusterRankingScoreByUserIdResult>;
    verifyClusterRankingScore(request: Request.VerifyClusterRankingScoreRequest): Promise<Result.VerifyClusterRankingScoreResult>;
    verifyClusterRankingScoreByUserId(request: Request.VerifyClusterRankingScoreByUserIdRequest): Promise<Result.VerifyClusterRankingScoreByUserIdResult>;
    verifyClusterRankingScoreByStampTask(request: Request.VerifyClusterRankingScoreByStampTaskRequest): Promise<Result.VerifyClusterRankingScoreByStampTaskResult>;
    describeClusterRankingReceivedRewards(request: Request.DescribeClusterRankingReceivedRewardsRequest): Promise<Result.DescribeClusterRankingReceivedRewardsResult>;
    describeClusterRankingReceivedRewardsByUserId(request: Request.DescribeClusterRankingReceivedRewardsByUserIdRequest): Promise<Result.DescribeClusterRankingReceivedRewardsByUserIdResult>;
    createClusterRankingReceivedReward(request: Request.CreateClusterRankingReceivedRewardRequest): Promise<Result.CreateClusterRankingReceivedRewardResult>;
    createClusterRankingReceivedRewardByUserId(request: Request.CreateClusterRankingReceivedRewardByUserIdRequest): Promise<Result.CreateClusterRankingReceivedRewardByUserIdResult>;
    receiveClusterRankingReceivedReward(request: Request.ReceiveClusterRankingReceivedRewardRequest): Promise<Result.ReceiveClusterRankingReceivedRewardResult>;
    receiveClusterRankingReceivedRewardByUserId(request: Request.ReceiveClusterRankingReceivedRewardByUserIdRequest): Promise<Result.ReceiveClusterRankingReceivedRewardByUserIdResult>;
    getClusterRankingReceivedReward(request: Request.GetClusterRankingReceivedRewardRequest): Promise<Result.GetClusterRankingReceivedRewardResult>;
    getClusterRankingReceivedRewardByUserId(request: Request.GetClusterRankingReceivedRewardByUserIdRequest): Promise<Result.GetClusterRankingReceivedRewardByUserIdResult>;
    deleteClusterRankingReceivedRewardByUserId(request: Request.DeleteClusterRankingReceivedRewardByUserIdRequest): Promise<Result.DeleteClusterRankingReceivedRewardByUserIdResult>;
    createClusterRankingReceivedRewardByStampTask(request: Request.CreateClusterRankingReceivedRewardByStampTaskRequest): Promise<Result.CreateClusterRankingReceivedRewardByStampTaskResult>;
    describeClusterRankings(request: Request.DescribeClusterRankingsRequest): Promise<Result.DescribeClusterRankingsResult>;
    describeClusterRankingsByUserId(request: Request.DescribeClusterRankingsByUserIdRequest): Promise<Result.DescribeClusterRankingsByUserIdResult>;
    getClusterRanking(request: Request.GetClusterRankingRequest): Promise<Result.GetClusterRankingResult>;
    getClusterRankingByUserId(request: Request.GetClusterRankingByUserIdRequest): Promise<Result.GetClusterRankingByUserIdResult>;
    describeSubscribeRankingModels(request: Request.DescribeSubscribeRankingModelsRequest): Promise<Result.DescribeSubscribeRankingModelsResult>;
    getSubscribeRankingModel(request: Request.GetSubscribeRankingModelRequest): Promise<Result.GetSubscribeRankingModelResult>;
    describeSubscribeRankingModelMasters(request: Request.DescribeSubscribeRankingModelMastersRequest): Promise<Result.DescribeSubscribeRankingModelMastersResult>;
    createSubscribeRankingModelMaster(request: Request.CreateSubscribeRankingModelMasterRequest): Promise<Result.CreateSubscribeRankingModelMasterResult>;
    getSubscribeRankingModelMaster(request: Request.GetSubscribeRankingModelMasterRequest): Promise<Result.GetSubscribeRankingModelMasterResult>;
    updateSubscribeRankingModelMaster(request: Request.UpdateSubscribeRankingModelMasterRequest): Promise<Result.UpdateSubscribeRankingModelMasterResult>;
    deleteSubscribeRankingModelMaster(request: Request.DeleteSubscribeRankingModelMasterRequest): Promise<Result.DeleteSubscribeRankingModelMasterResult>;
    describeSubscribes(request: Request.DescribeSubscribesRequest): Promise<Result.DescribeSubscribesResult>;
    describeSubscribesByUserId(request: Request.DescribeSubscribesByUserIdRequest): Promise<Result.DescribeSubscribesByUserIdResult>;
    addSubscribe(request: Request.AddSubscribeRequest): Promise<Result.AddSubscribeResult>;
    addSubscribeByUserId(request: Request.AddSubscribeByUserIdRequest): Promise<Result.AddSubscribeByUserIdResult>;
    describeSubscribeRankingScores(request: Request.DescribeSubscribeRankingScoresRequest): Promise<Result.DescribeSubscribeRankingScoresResult>;
    describeSubscribeRankingScoresByUserId(request: Request.DescribeSubscribeRankingScoresByUserIdRequest): Promise<Result.DescribeSubscribeRankingScoresByUserIdResult>;
    putSubscribeRankingScore(request: Request.PutSubscribeRankingScoreRequest): Promise<Result.PutSubscribeRankingScoreResult>;
    putSubscribeRankingScoreByUserId(request: Request.PutSubscribeRankingScoreByUserIdRequest): Promise<Result.PutSubscribeRankingScoreByUserIdResult>;
    getSubscribeRankingScore(request: Request.GetSubscribeRankingScoreRequest): Promise<Result.GetSubscribeRankingScoreResult>;
    getSubscribeRankingScoreByUserId(request: Request.GetSubscribeRankingScoreByUserIdRequest): Promise<Result.GetSubscribeRankingScoreByUserIdResult>;
    deleteSubscribeRankingScoreByUserId(request: Request.DeleteSubscribeRankingScoreByUserIdRequest): Promise<Result.DeleteSubscribeRankingScoreByUserIdResult>;
    verifySubscribeRankingScore(request: Request.VerifySubscribeRankingScoreRequest): Promise<Result.VerifySubscribeRankingScoreResult>;
    verifySubscribeRankingScoreByUserId(request: Request.VerifySubscribeRankingScoreByUserIdRequest): Promise<Result.VerifySubscribeRankingScoreByUserIdResult>;
    verifySubscribeRankingScoreByStampTask(request: Request.VerifySubscribeRankingScoreByStampTaskRequest): Promise<Result.VerifySubscribeRankingScoreByStampTaskResult>;
    describeSubscribeRankings(request: Request.DescribeSubscribeRankingsRequest): Promise<Result.DescribeSubscribeRankingsResult>;
    describeSubscribeRankingsByUserId(request: Request.DescribeSubscribeRankingsByUserIdRequest): Promise<Result.DescribeSubscribeRankingsByUserIdResult>;
    getSubscribeRanking(request: Request.GetSubscribeRankingRequest): Promise<Result.GetSubscribeRankingResult>;
    getSubscribeRankingByUserId(request: Request.GetSubscribeRankingByUserIdRequest): Promise<Result.GetSubscribeRankingByUserIdResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentRankingMaster(request: Request.GetCurrentRankingMasterRequest): Promise<Result.GetCurrentRankingMasterResult>;
    preUpdateCurrentRankingMaster(request: Request.PreUpdateCurrentRankingMasterRequest): Promise<Result.PreUpdateCurrentRankingMasterResult>;
    updateCurrentRankingMaster(request: Request.UpdateCurrentRankingMasterRequest): Promise<Result.UpdateCurrentRankingMasterResult>;
    updateCurrentRankingMasterFromGitHub(request: Request.UpdateCurrentRankingMasterFromGitHubRequest): Promise<Result.UpdateCurrentRankingMasterFromGitHubResult>;
    getSubscribe(request: Request.GetSubscribeRequest): Promise<Result.GetSubscribeResult>;
    getSubscribeByUserId(request: Request.GetSubscribeByUserIdRequest): Promise<Result.GetSubscribeByUserIdResult>;
    deleteSubscribe(request: Request.DeleteSubscribeRequest): Promise<Result.DeleteSubscribeResult>;
    deleteSubscribeByUserId(request: Request.DeleteSubscribeByUserIdRequest): Promise<Result.DeleteSubscribeByUserIdResult>;
}

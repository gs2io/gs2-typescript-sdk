import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2RankingRestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    getServiceVersion(request: Request.GetServiceVersionRequest): Promise<Result.GetServiceVersionResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    prepareImportUserDataByUserId(request: Request.PrepareImportUserDataByUserIdRequest): Promise<Result.PrepareImportUserDataByUserIdResult>;
    importUserDataByUserId(request: Request.ImportUserDataByUserIdRequest): Promise<Result.ImportUserDataByUserIdResult>;
    checkImportUserDataByUserId(request: Request.CheckImportUserDataByUserIdRequest): Promise<Result.CheckImportUserDataByUserIdResult>;
    describeCategoryModels(request: Request.DescribeCategoryModelsRequest): Promise<Result.DescribeCategoryModelsResult>;
    getCategoryModel(request: Request.GetCategoryModelRequest): Promise<Result.GetCategoryModelResult>;
    describeCategoryModelMasters(request: Request.DescribeCategoryModelMastersRequest): Promise<Result.DescribeCategoryModelMastersResult>;
    createCategoryModelMaster(request: Request.CreateCategoryModelMasterRequest): Promise<Result.CreateCategoryModelMasterResult>;
    getCategoryModelMaster(request: Request.GetCategoryModelMasterRequest): Promise<Result.GetCategoryModelMasterResult>;
    updateCategoryModelMaster(request: Request.UpdateCategoryModelMasterRequest): Promise<Result.UpdateCategoryModelMasterResult>;
    deleteCategoryModelMaster(request: Request.DeleteCategoryModelMasterRequest): Promise<Result.DeleteCategoryModelMasterResult>;
    subscribe(request: Request.SubscribeRequest): Promise<Result.SubscribeResult>;
    subscribeByUserId(request: Request.SubscribeByUserIdRequest): Promise<Result.SubscribeByUserIdResult>;
    describeScores(request: Request.DescribeScoresRequest): Promise<Result.DescribeScoresResult>;
    describeScoresByUserId(request: Request.DescribeScoresByUserIdRequest): Promise<Result.DescribeScoresByUserIdResult>;
    getScore(request: Request.GetScoreRequest): Promise<Result.GetScoreResult>;
    getScoreByUserId(request: Request.GetScoreByUserIdRequest): Promise<Result.GetScoreByUserIdResult>;
    describeRankings(request: Request.DescribeRankingsRequest): Promise<Result.DescribeRankingsResult>;
    describeRankingssByUserId(request: Request.DescribeRankingssByUserIdRequest): Promise<Result.DescribeRankingssByUserIdResult>;
    describeNearRankings(request: Request.DescribeNearRankingsRequest): Promise<Result.DescribeNearRankingsResult>;
    getRanking(request: Request.GetRankingRequest): Promise<Result.GetRankingResult>;
    getRankingByUserId(request: Request.GetRankingByUserIdRequest): Promise<Result.GetRankingByUserIdResult>;
    putScore(request: Request.PutScoreRequest): Promise<Result.PutScoreResult>;
    putScoreByUserId(request: Request.PutScoreByUserIdRequest): Promise<Result.PutScoreByUserIdResult>;
    calcRanking(request: Request.CalcRankingRequest): Promise<Result.CalcRankingResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentRankingMaster(request: Request.GetCurrentRankingMasterRequest): Promise<Result.GetCurrentRankingMasterResult>;
    preUpdateCurrentRankingMaster(request: Request.PreUpdateCurrentRankingMasterRequest): Promise<Result.PreUpdateCurrentRankingMasterResult>;
    updateCurrentRankingMaster(request: Request.UpdateCurrentRankingMasterRequest): Promise<Result.UpdateCurrentRankingMasterResult>;
    updateCurrentRankingMasterFromGitHub(request: Request.UpdateCurrentRankingMasterFromGitHubRequest): Promise<Result.UpdateCurrentRankingMasterFromGitHubResult>;
    getSubscribe(request: Request.GetSubscribeRequest): Promise<Result.GetSubscribeResult>;
    getSubscribeByUserId(request: Request.GetSubscribeByUserIdRequest): Promise<Result.GetSubscribeByUserIdResult>;
    unsubscribe(request: Request.UnsubscribeRequest): Promise<Result.UnsubscribeResult>;
    unsubscribeByUserId(request: Request.UnsubscribeByUserIdRequest): Promise<Result.UnsubscribeByUserIdResult>;
    describeSubscribesByCategoryName(request: Request.DescribeSubscribesByCategoryNameRequest): Promise<Result.DescribeSubscribesByCategoryNameResult>;
    describeSubscribesByCategoryNameAndUserId(request: Request.DescribeSubscribesByCategoryNameAndUserIdRequest): Promise<Result.DescribeSubscribesByCategoryNameAndUserIdResult>;
}

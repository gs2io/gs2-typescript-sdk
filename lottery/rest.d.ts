import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2LotteryRestClient extends AbstractGs2RestClient {
    static ENDPOINT_HOST: string | null;
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    getServiceVersion(request: Request.GetServiceVersionRequest): Promise<Result.GetServiceVersionResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    prepareImportUserDataByUserId(request: Request.PrepareImportUserDataByUserIdRequest): Promise<Result.PrepareImportUserDataByUserIdResult>;
    importUserDataByUserId(request: Request.ImportUserDataByUserIdRequest): Promise<Result.ImportUserDataByUserIdResult>;
    checkImportUserDataByUserId(request: Request.CheckImportUserDataByUserIdRequest): Promise<Result.CheckImportUserDataByUserIdResult>;
    describeLotteryModelMasters(request: Request.DescribeLotteryModelMastersRequest): Promise<Result.DescribeLotteryModelMastersResult>;
    createLotteryModelMaster(request: Request.CreateLotteryModelMasterRequest): Promise<Result.CreateLotteryModelMasterResult>;
    getLotteryModelMaster(request: Request.GetLotteryModelMasterRequest): Promise<Result.GetLotteryModelMasterResult>;
    updateLotteryModelMaster(request: Request.UpdateLotteryModelMasterRequest): Promise<Result.UpdateLotteryModelMasterResult>;
    deleteLotteryModelMaster(request: Request.DeleteLotteryModelMasterRequest): Promise<Result.DeleteLotteryModelMasterResult>;
    describePrizeTableMasters(request: Request.DescribePrizeTableMastersRequest): Promise<Result.DescribePrizeTableMastersResult>;
    createPrizeTableMaster(request: Request.CreatePrizeTableMasterRequest): Promise<Result.CreatePrizeTableMasterResult>;
    getPrizeTableMaster(request: Request.GetPrizeTableMasterRequest): Promise<Result.GetPrizeTableMasterResult>;
    updatePrizeTableMaster(request: Request.UpdatePrizeTableMasterRequest): Promise<Result.UpdatePrizeTableMasterResult>;
    deletePrizeTableMaster(request: Request.DeletePrizeTableMasterRequest): Promise<Result.DeletePrizeTableMasterResult>;
    describeLotteryModels(request: Request.DescribeLotteryModelsRequest): Promise<Result.DescribeLotteryModelsResult>;
    getLotteryModel(request: Request.GetLotteryModelRequest): Promise<Result.GetLotteryModelResult>;
    describePrizeTables(request: Request.DescribePrizeTablesRequest): Promise<Result.DescribePrizeTablesResult>;
    getPrizeTable(request: Request.GetPrizeTableRequest): Promise<Result.GetPrizeTableResult>;
    drawByUserId(request: Request.DrawByUserIdRequest): Promise<Result.DrawByUserIdResult>;
    prediction(request: Request.PredictionRequest): Promise<Result.PredictionResult>;
    predictionByUserId(request: Request.PredictionByUserIdRequest): Promise<Result.PredictionByUserIdResult>;
    drawWithRandomSeedByUserId(request: Request.DrawWithRandomSeedByUserIdRequest): Promise<Result.DrawWithRandomSeedByUserIdResult>;
    drawByStampSheet(request: Request.DrawByStampSheetRequest): Promise<Result.DrawByStampSheetResult>;
    describeProbabilities(request: Request.DescribeProbabilitiesRequest): Promise<Result.DescribeProbabilitiesResult>;
    describeProbabilitiesByUserId(request: Request.DescribeProbabilitiesByUserIdRequest): Promise<Result.DescribeProbabilitiesByUserIdResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentLotteryMaster(request: Request.GetCurrentLotteryMasterRequest): Promise<Result.GetCurrentLotteryMasterResult>;
    preUpdateCurrentLotteryMaster(request: Request.PreUpdateCurrentLotteryMasterRequest): Promise<Result.PreUpdateCurrentLotteryMasterResult>;
    updateCurrentLotteryMaster(request: Request.UpdateCurrentLotteryMasterRequest): Promise<Result.UpdateCurrentLotteryMasterResult>;
    updateCurrentLotteryMasterFromGitHub(request: Request.UpdateCurrentLotteryMasterFromGitHubRequest): Promise<Result.UpdateCurrentLotteryMasterFromGitHubResult>;
    describePrizeLimits(request: Request.DescribePrizeLimitsRequest): Promise<Result.DescribePrizeLimitsResult>;
    getPrizeLimit(request: Request.GetPrizeLimitRequest): Promise<Result.GetPrizeLimitResult>;
    resetPrizeLimit(request: Request.ResetPrizeLimitRequest): Promise<Result.ResetPrizeLimitResult>;
    describeBoxes(request: Request.DescribeBoxesRequest): Promise<Result.DescribeBoxesResult>;
    describeBoxesByUserId(request: Request.DescribeBoxesByUserIdRequest): Promise<Result.DescribeBoxesByUserIdResult>;
    getBox(request: Request.GetBoxRequest): Promise<Result.GetBoxResult>;
    getBoxByUserId(request: Request.GetBoxByUserIdRequest): Promise<Result.GetBoxByUserIdResult>;
    resetBox(request: Request.ResetBoxRequest): Promise<Result.ResetBoxResult>;
    resetBoxByUserId(request: Request.ResetBoxByUserIdRequest): Promise<Result.ResetBoxByUserIdResult>;
    resetByStampSheet(request: Request.ResetByStampSheetRequest): Promise<Result.ResetByStampSheetResult>;
}

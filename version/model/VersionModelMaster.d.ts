import IModel from '../../core/interface/IModel';
import Version from './Version';
import ScheduleVersion from './ScheduleVersion';
export default class VersionModelMaster implements IModel {
    private versionModelId;
    private name;
    private description;
    private metadata;
    private scope;
    private type;
    private currentVersion;
    private warningVersion;
    private errorVersion;
    private scheduleVersions;
    private needSignature;
    private signatureKeyId;
    private createdAt;
    private updatedAt;
    private revision;
    static getRegion(grn: string): string | null;
    static getOwnerId(grn: string): string | null;
    static getNamespaceName(grn: string): string | null;
    static getVersionName(grn: string): string | null;
    static isValid(grn: string): boolean;
    static createGrn(region: string | null, ownerId: string | null, namespaceName: string | null, versionName: string | null): string | null;
    getVersionModelId(): string | null;
    setVersionModelId(versionModelId: string | null): this;
    withVersionModelId(versionModelId: string | null): this;
    getName(): string | null;
    setName(name: string | null): this;
    withName(name: string | null): this;
    getDescription(): string | null;
    setDescription(description: string | null): this;
    withDescription(description: string | null): this;
    getMetadata(): string | null;
    setMetadata(metadata: string | null): this;
    withMetadata(metadata: string | null): this;
    getScope(): string | null;
    setScope(scope: string | null): this;
    withScope(scope: string | null): this;
    getType(): string | null;
    setType(type: string | null): this;
    withType(type: string | null): this;
    getCurrentVersion(): Version | null;
    setCurrentVersion(currentVersion: Version | null): this;
    withCurrentVersion(currentVersion: Version | null): this;
    getWarningVersion(): Version | null;
    setWarningVersion(warningVersion: Version | null): this;
    withWarningVersion(warningVersion: Version | null): this;
    getErrorVersion(): Version | null;
    setErrorVersion(errorVersion: Version | null): this;
    withErrorVersion(errorVersion: Version | null): this;
    getScheduleVersions(): ScheduleVersion[] | null;
    setScheduleVersions(scheduleVersions: ScheduleVersion[] | null): this;
    withScheduleVersions(scheduleVersions: ScheduleVersion[] | null): this;
    getNeedSignature(): boolean | null;
    setNeedSignature(needSignature: boolean | null): this;
    withNeedSignature(needSignature: boolean | null): this;
    getSignatureKeyId(): string | null;
    setSignatureKeyId(signatureKeyId: string | null): this;
    withSignatureKeyId(signatureKeyId: string | null): this;
    getCreatedAt(): number | null;
    setCreatedAt(createdAt: number | null): this;
    withCreatedAt(createdAt: number | null): this;
    getUpdatedAt(): number | null;
    setUpdatedAt(updatedAt: number | null): this;
    withUpdatedAt(updatedAt: number | null): this;
    getRevision(): number | null;
    setRevision(revision: number | null): this;
    withRevision(revision: number | null): this;
    static fromDict(data: {
        [key: string]: any;
    }): VersionModelMaster | null;
    toDict(): {
        [key: string]: any;
    };
}

import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2ProjectRestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    createAccount(request: Request.CreateAccountRequest): Promise<Result.CreateAccountResult>;
    verify(request: Request.VerifyRequest): Promise<Result.VerifyResult>;
    signIn(request: Request.SignInRequest): Promise<Result.SignInResult>;
    forget(request: Request.ForgetRequest): Promise<Result.ForgetResult>;
    issuePassword(request: Request.IssuePasswordRequest): Promise<Result.IssuePasswordResult>;
    updateAccount(request: Request.UpdateAccountRequest): Promise<Result.UpdateAccountResult>;
    enableMfa(request: Request.EnableMfaRequest): Promise<Result.EnableMfaResult>;
    challengeMfa(request: Request.ChallengeMfaRequest): Promise<Result.ChallengeMfaResult>;
    disableMfa(request: Request.DisableMfaRequest): Promise<Result.DisableMfaResult>;
    deleteAccount(request: Request.DeleteAccountRequest): Promise<Result.DeleteAccountResult>;
    getServiceVersion(request: Request.GetServiceVersionRequest): Promise<Result.GetServiceVersionResult>;
    describeProjects(request: Request.DescribeProjectsRequest): Promise<Result.DescribeProjectsResult>;
    createProject(request: Request.CreateProjectRequest): Promise<Result.CreateProjectResult>;
    getProject(request: Request.GetProjectRequest): Promise<Result.GetProjectResult>;
    getProjectToken(request: Request.GetProjectTokenRequest): Promise<Result.GetProjectTokenResult>;
    getProjectTokenByIdentifier(request: Request.GetProjectTokenByIdentifierRequest): Promise<Result.GetProjectTokenByIdentifierResult>;
    updateProject(request: Request.UpdateProjectRequest): Promise<Result.UpdateProjectResult>;
    activateRegion(request: Request.ActivateRegionRequest): Promise<Result.ActivateRegionResult>;
    waitActivateRegion(request: Request.WaitActivateRegionRequest): Promise<Result.WaitActivateRegionResult>;
    deleteProject(request: Request.DeleteProjectRequest): Promise<Result.DeleteProjectResult>;
    describeBillingMethods(request: Request.DescribeBillingMethodsRequest): Promise<Result.DescribeBillingMethodsResult>;
    createBillingMethod(request: Request.CreateBillingMethodRequest): Promise<Result.CreateBillingMethodResult>;
    getBillingMethod(request: Request.GetBillingMethodRequest): Promise<Result.GetBillingMethodResult>;
    updateBillingMethod(request: Request.UpdateBillingMethodRequest): Promise<Result.UpdateBillingMethodResult>;
    deleteBillingMethod(request: Request.DeleteBillingMethodRequest): Promise<Result.DeleteBillingMethodResult>;
    describeReceipts(request: Request.DescribeReceiptsRequest): Promise<Result.DescribeReceiptsResult>;
    describeBillings(request: Request.DescribeBillingsRequest): Promise<Result.DescribeBillingsResult>;
    describeDumpProgresses(request: Request.DescribeDumpProgressesRequest): Promise<Result.DescribeDumpProgressesResult>;
    getDumpProgress(request: Request.GetDumpProgressRequest): Promise<Result.GetDumpProgressResult>;
    waitDumpUserData(request: Request.WaitDumpUserDataRequest): Promise<Result.WaitDumpUserDataResult>;
    archiveDumpUserData(request: Request.ArchiveDumpUserDataRequest): Promise<Result.ArchiveDumpUserDataResult>;
    dumpUserData(request: Request.DumpUserDataRequest): Promise<Result.DumpUserDataResult>;
    getDumpUserData(request: Request.GetDumpUserDataRequest): Promise<Result.GetDumpUserDataResult>;
    describeCleanProgresses(request: Request.DescribeCleanProgressesRequest): Promise<Result.DescribeCleanProgressesResult>;
    getCleanProgress(request: Request.GetCleanProgressRequest): Promise<Result.GetCleanProgressResult>;
    waitCleanUserData(request: Request.WaitCleanUserDataRequest): Promise<Result.WaitCleanUserDataResult>;
    cleanUserData(request: Request.CleanUserDataRequest): Promise<Result.CleanUserDataResult>;
    describeImportProgresses(request: Request.DescribeImportProgressesRequest): Promise<Result.DescribeImportProgressesResult>;
    getImportProgress(request: Request.GetImportProgressRequest): Promise<Result.GetImportProgressResult>;
    waitImportUserData(request: Request.WaitImportUserDataRequest): Promise<Result.WaitImportUserDataResult>;
    prepareImportUserData(request: Request.PrepareImportUserDataRequest): Promise<Result.PrepareImportUserDataResult>;
    importUserData(request: Request.ImportUserDataRequest): Promise<Result.ImportUserDataResult>;
    describeImportErrorLogs(request: Request.DescribeImportErrorLogsRequest): Promise<Result.DescribeImportErrorLogsResult>;
    getImportErrorLog(request: Request.GetImportErrorLogRequest): Promise<Result.GetImportErrorLogResult>;
}

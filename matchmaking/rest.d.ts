import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2MatchmakingRestClient extends AbstractGs2RestClient {
    static ENDPOINT_HOST: string | null;
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    getServiceVersion(request: Request.GetServiceVersionRequest): Promise<Result.GetServiceVersionResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    prepareImportUserDataByUserId(request: Request.PrepareImportUserDataByUserIdRequest): Promise<Result.PrepareImportUserDataByUserIdResult>;
    importUserDataByUserId(request: Request.ImportUserDataByUserIdRequest): Promise<Result.ImportUserDataByUserIdResult>;
    checkImportUserDataByUserId(request: Request.CheckImportUserDataByUserIdRequest): Promise<Result.CheckImportUserDataByUserIdResult>;
    describeGatherings(request: Request.DescribeGatheringsRequest): Promise<Result.DescribeGatheringsResult>;
    createGathering(request: Request.CreateGatheringRequest): Promise<Result.CreateGatheringResult>;
    createGatheringByUserId(request: Request.CreateGatheringByUserIdRequest): Promise<Result.CreateGatheringByUserIdResult>;
    updateGathering(request: Request.UpdateGatheringRequest): Promise<Result.UpdateGatheringResult>;
    updateGatheringByUserId(request: Request.UpdateGatheringByUserIdRequest): Promise<Result.UpdateGatheringByUserIdResult>;
    doMatchmakingByPlayer(request: Request.DoMatchmakingByPlayerRequest): Promise<Result.DoMatchmakingByPlayerResult>;
    doMatchmaking(request: Request.DoMatchmakingRequest): Promise<Result.DoMatchmakingResult>;
    doMatchmakingByUserId(request: Request.DoMatchmakingByUserIdRequest): Promise<Result.DoMatchmakingByUserIdResult>;
    ping(request: Request.PingRequest): Promise<Result.PingResult>;
    pingByUserId(request: Request.PingByUserIdRequest): Promise<Result.PingByUserIdResult>;
    getGathering(request: Request.GetGatheringRequest): Promise<Result.GetGatheringResult>;
    cancelMatchmaking(request: Request.CancelMatchmakingRequest): Promise<Result.CancelMatchmakingResult>;
    cancelMatchmakingByUserId(request: Request.CancelMatchmakingByUserIdRequest): Promise<Result.CancelMatchmakingByUserIdResult>;
    earlyComplete(request: Request.EarlyCompleteRequest): Promise<Result.EarlyCompleteResult>;
    earlyCompleteByUserId(request: Request.EarlyCompleteByUserIdRequest): Promise<Result.EarlyCompleteByUserIdResult>;
    deleteGathering(request: Request.DeleteGatheringRequest): Promise<Result.DeleteGatheringResult>;
    describeRatingModelMasters(request: Request.DescribeRatingModelMastersRequest): Promise<Result.DescribeRatingModelMastersResult>;
    createRatingModelMaster(request: Request.CreateRatingModelMasterRequest): Promise<Result.CreateRatingModelMasterResult>;
    getRatingModelMaster(request: Request.GetRatingModelMasterRequest): Promise<Result.GetRatingModelMasterResult>;
    updateRatingModelMaster(request: Request.UpdateRatingModelMasterRequest): Promise<Result.UpdateRatingModelMasterResult>;
    deleteRatingModelMaster(request: Request.DeleteRatingModelMasterRequest): Promise<Result.DeleteRatingModelMasterResult>;
    describeRatingModels(request: Request.DescribeRatingModelsRequest): Promise<Result.DescribeRatingModelsResult>;
    getRatingModel(request: Request.GetRatingModelRequest): Promise<Result.GetRatingModelResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentModelMaster(request: Request.GetCurrentModelMasterRequest): Promise<Result.GetCurrentModelMasterResult>;
    preUpdateCurrentModelMaster(request: Request.PreUpdateCurrentModelMasterRequest): Promise<Result.PreUpdateCurrentModelMasterResult>;
    updateCurrentModelMaster(request: Request.UpdateCurrentModelMasterRequest): Promise<Result.UpdateCurrentModelMasterResult>;
    updateCurrentModelMasterFromGitHub(request: Request.UpdateCurrentModelMasterFromGitHubRequest): Promise<Result.UpdateCurrentModelMasterFromGitHubResult>;
    describeSeasonModels(request: Request.DescribeSeasonModelsRequest): Promise<Result.DescribeSeasonModelsResult>;
    getSeasonModel(request: Request.GetSeasonModelRequest): Promise<Result.GetSeasonModelResult>;
    describeSeasonModelMasters(request: Request.DescribeSeasonModelMastersRequest): Promise<Result.DescribeSeasonModelMastersResult>;
    createSeasonModelMaster(request: Request.CreateSeasonModelMasterRequest): Promise<Result.CreateSeasonModelMasterResult>;
    getSeasonModelMaster(request: Request.GetSeasonModelMasterRequest): Promise<Result.GetSeasonModelMasterResult>;
    updateSeasonModelMaster(request: Request.UpdateSeasonModelMasterRequest): Promise<Result.UpdateSeasonModelMasterResult>;
    deleteSeasonModelMaster(request: Request.DeleteSeasonModelMasterRequest): Promise<Result.DeleteSeasonModelMasterResult>;
    describeSeasonGatherings(request: Request.DescribeSeasonGatheringsRequest): Promise<Result.DescribeSeasonGatheringsResult>;
    describeMatchmakingSeasonGatherings(request: Request.DescribeMatchmakingSeasonGatheringsRequest): Promise<Result.DescribeMatchmakingSeasonGatheringsResult>;
    doSeasonMatchmaking(request: Request.DoSeasonMatchmakingRequest): Promise<Result.DoSeasonMatchmakingResult>;
    doSeasonMatchmakingByUserId(request: Request.DoSeasonMatchmakingByUserIdRequest): Promise<Result.DoSeasonMatchmakingByUserIdResult>;
    getSeasonGathering(request: Request.GetSeasonGatheringRequest): Promise<Result.GetSeasonGatheringResult>;
    verifyIncludeParticipant(request: Request.VerifyIncludeParticipantRequest): Promise<Result.VerifyIncludeParticipantResult>;
    verifyIncludeParticipantByUserId(request: Request.VerifyIncludeParticipantByUserIdRequest): Promise<Result.VerifyIncludeParticipantByUserIdResult>;
    deleteSeasonGathering(request: Request.DeleteSeasonGatheringRequest): Promise<Result.DeleteSeasonGatheringResult>;
    verifyIncludeParticipantByStampTask(request: Request.VerifyIncludeParticipantByStampTaskRequest): Promise<Result.VerifyIncludeParticipantByStampTaskResult>;
    describeJoinedSeasonGatherings(request: Request.DescribeJoinedSeasonGatheringsRequest): Promise<Result.DescribeJoinedSeasonGatheringsResult>;
    describeJoinedSeasonGatheringsByUserId(request: Request.DescribeJoinedSeasonGatheringsByUserIdRequest): Promise<Result.DescribeJoinedSeasonGatheringsByUserIdResult>;
    getJoinedSeasonGathering(request: Request.GetJoinedSeasonGatheringRequest): Promise<Result.GetJoinedSeasonGatheringResult>;
    getJoinedSeasonGatheringByUserId(request: Request.GetJoinedSeasonGatheringByUserIdRequest): Promise<Result.GetJoinedSeasonGatheringByUserIdResult>;
    describeRatings(request: Request.DescribeRatingsRequest): Promise<Result.DescribeRatingsResult>;
    describeRatingsByUserId(request: Request.DescribeRatingsByUserIdRequest): Promise<Result.DescribeRatingsByUserIdResult>;
    getRating(request: Request.GetRatingRequest): Promise<Result.GetRatingResult>;
    getRatingByUserId(request: Request.GetRatingByUserIdRequest): Promise<Result.GetRatingByUserIdResult>;
    putResult(request: Request.PutResultRequest): Promise<Result.PutResultResult>;
    deleteRating(request: Request.DeleteRatingRequest): Promise<Result.DeleteRatingResult>;
    getBallot(request: Request.GetBallotRequest): Promise<Result.GetBallotResult>;
    getBallotByUserId(request: Request.GetBallotByUserIdRequest): Promise<Result.GetBallotByUserIdResult>;
    vote(request: Request.VoteRequest): Promise<Result.VoteResult>;
    voteMultiple(request: Request.VoteMultipleRequest): Promise<Result.VoteMultipleResult>;
    commitVote(request: Request.CommitVoteRequest): Promise<Result.CommitVoteResult>;
}

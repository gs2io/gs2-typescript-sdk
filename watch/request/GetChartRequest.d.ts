import IRequest from '../../core/interface/IRequest';
import * as Gs2Watch from '../model';
export default class GetChartRequest implements IRequest {
    private requestId;
    private contextStack;
    private measure;
    private grn;
    private round;
    private filters;
    private groupBys;
    private countBy;
    private begin;
    private end;
    private pageToken;
    private limit;
    getRequestId(): string | null;
    setRequestId(requestId: string | null): this;
    withRequestId(requestId: string | null): this;
    getContextStack(): string | null;
    setContextStack(contextStack: string | null): this;
    withContextStack(contextStack: string | null): this;
    getMeasure(): string | null;
    setMeasure(measure: string | null): this;
    withMeasure(measure: string | null): this;
    getGrn(): string | null;
    setGrn(grn: string | null): this;
    withGrn(grn: string | null): this;
    getRound(): string | null;
    setRound(round: string | null): this;
    withRound(round: string | null): this;
    getFilters(): Gs2Watch.Filter[] | null;
    setFilters(filters: Gs2Watch.Filter[] | null): this;
    withFilters(filters: Gs2Watch.Filter[] | null): this;
    getGroupBys(): string[] | null;
    setGroupBys(groupBys: string[] | null): this;
    withGroupBys(groupBys: string[] | null): this;
    getCountBy(): string | null;
    setCountBy(countBy: string | null): this;
    withCountBy(countBy: string | null): this;
    getBegin(): number | null;
    setBegin(begin: number | null): this;
    withBegin(begin: number | null): this;
    getEnd(): number | null;
    setEnd(end: number | null): this;
    withEnd(end: number | null): this;
    getPageToken(): string | null;
    setPageToken(pageToken: string | null): this;
    withPageToken(pageToken: string | null): this;
    getLimit(): number | null;
    setLimit(limit: number | null): this;
    withLimit(limit: number | null): this;
    static fromDict(data: {
        [key: string]: any;
    }): GetChartRequest;
    toDict(): {
        [key: string]: any;
    };
}

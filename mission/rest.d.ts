import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2MissionRestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    describeCompletes(request: Request.DescribeCompletesRequest): Promise<Result.DescribeCompletesResult>;
    describeCompletesByUserId(request: Request.DescribeCompletesByUserIdRequest): Promise<Result.DescribeCompletesByUserIdResult>;
    complete(request: Request.CompleteRequest): Promise<Result.CompleteResult>;
    completeByUserId(request: Request.CompleteByUserIdRequest): Promise<Result.CompleteByUserIdResult>;
    receiveByUserId(request: Request.ReceiveByUserIdRequest): Promise<Result.ReceiveByUserIdResult>;
    revertReceiveByUserId(request: Request.RevertReceiveByUserIdRequest): Promise<Result.RevertReceiveByUserIdResult>;
    getComplete(request: Request.GetCompleteRequest): Promise<Result.GetCompleteResult>;
    getCompleteByUserId(request: Request.GetCompleteByUserIdRequest): Promise<Result.GetCompleteByUserIdResult>;
    deleteCompleteByUserId(request: Request.DeleteCompleteByUserIdRequest): Promise<Result.DeleteCompleteByUserIdResult>;
    receiveByStampTask(request: Request.ReceiveByStampTaskRequest): Promise<Result.ReceiveByStampTaskResult>;
    revertReceiveByStampSheet(request: Request.RevertReceiveByStampSheetRequest): Promise<Result.RevertReceiveByStampSheetResult>;
    describeCounterModelMasters(request: Request.DescribeCounterModelMastersRequest): Promise<Result.DescribeCounterModelMastersResult>;
    createCounterModelMaster(request: Request.CreateCounterModelMasterRequest): Promise<Result.CreateCounterModelMasterResult>;
    getCounterModelMaster(request: Request.GetCounterModelMasterRequest): Promise<Result.GetCounterModelMasterResult>;
    updateCounterModelMaster(request: Request.UpdateCounterModelMasterRequest): Promise<Result.UpdateCounterModelMasterResult>;
    deleteCounterModelMaster(request: Request.DeleteCounterModelMasterRequest): Promise<Result.DeleteCounterModelMasterResult>;
    describeMissionGroupModelMasters(request: Request.DescribeMissionGroupModelMastersRequest): Promise<Result.DescribeMissionGroupModelMastersResult>;
    createMissionGroupModelMaster(request: Request.CreateMissionGroupModelMasterRequest): Promise<Result.CreateMissionGroupModelMasterResult>;
    getMissionGroupModelMaster(request: Request.GetMissionGroupModelMasterRequest): Promise<Result.GetMissionGroupModelMasterResult>;
    updateMissionGroupModelMaster(request: Request.UpdateMissionGroupModelMasterRequest): Promise<Result.UpdateMissionGroupModelMasterResult>;
    deleteMissionGroupModelMaster(request: Request.DeleteMissionGroupModelMasterRequest): Promise<Result.DeleteMissionGroupModelMasterResult>;
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    describeCounters(request: Request.DescribeCountersRequest): Promise<Result.DescribeCountersResult>;
    describeCountersByUserId(request: Request.DescribeCountersByUserIdRequest): Promise<Result.DescribeCountersByUserIdResult>;
    increaseCounterByUserId(request: Request.IncreaseCounterByUserIdRequest): Promise<Result.IncreaseCounterByUserIdResult>;
    decreaseCounterByUserId(request: Request.DecreaseCounterByUserIdRequest): Promise<Result.DecreaseCounterByUserIdResult>;
    getCounter(request: Request.GetCounterRequest): Promise<Result.GetCounterResult>;
    getCounterByUserId(request: Request.GetCounterByUserIdRequest): Promise<Result.GetCounterByUserIdResult>;
    deleteCounterByUserId(request: Request.DeleteCounterByUserIdRequest): Promise<Result.DeleteCounterByUserIdResult>;
    increaseByStampSheet(request: Request.IncreaseByStampSheetRequest): Promise<Result.IncreaseByStampSheetResult>;
    decreaseByStampTask(request: Request.DecreaseByStampTaskRequest): Promise<Result.DecreaseByStampTaskResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentMissionMaster(request: Request.GetCurrentMissionMasterRequest): Promise<Result.GetCurrentMissionMasterResult>;
    updateCurrentMissionMaster(request: Request.UpdateCurrentMissionMasterRequest): Promise<Result.UpdateCurrentMissionMasterResult>;
    updateCurrentMissionMasterFromGitHub(request: Request.UpdateCurrentMissionMasterFromGitHubRequest): Promise<Result.UpdateCurrentMissionMasterFromGitHubResult>;
    describeCounterModels(request: Request.DescribeCounterModelsRequest): Promise<Result.DescribeCounterModelsResult>;
    getCounterModel(request: Request.GetCounterModelRequest): Promise<Result.GetCounterModelResult>;
    describeMissionGroupModels(request: Request.DescribeMissionGroupModelsRequest): Promise<Result.DescribeMissionGroupModelsResult>;
    getMissionGroupModel(request: Request.GetMissionGroupModelRequest): Promise<Result.GetMissionGroupModelResult>;
    describeMissionTaskModels(request: Request.DescribeMissionTaskModelsRequest): Promise<Result.DescribeMissionTaskModelsResult>;
    getMissionTaskModel(request: Request.GetMissionTaskModelRequest): Promise<Result.GetMissionTaskModelResult>;
    describeMissionTaskModelMasters(request: Request.DescribeMissionTaskModelMastersRequest): Promise<Result.DescribeMissionTaskModelMastersResult>;
    createMissionTaskModelMaster(request: Request.CreateMissionTaskModelMasterRequest): Promise<Result.CreateMissionTaskModelMasterResult>;
    getMissionTaskModelMaster(request: Request.GetMissionTaskModelMasterRequest): Promise<Result.GetMissionTaskModelMasterResult>;
    updateMissionTaskModelMaster(request: Request.UpdateMissionTaskModelMasterRequest): Promise<Result.UpdateMissionTaskModelMasterResult>;
    deleteMissionTaskModelMaster(request: Request.DeleteMissionTaskModelMasterRequest): Promise<Result.DeleteMissionTaskModelMasterResult>;
}

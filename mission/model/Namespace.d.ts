import IModel from '../../core/interface/IModel';
import ScriptSetting from './ScriptSetting';
import NotificationSetting from './NotificationSetting';
import LogSetting from './LogSetting';
export default class Namespace implements IModel {
    private namespaceId;
    private name;
    private description;
    private missionCompleteScript;
    private counterIncrementScript;
    private receiveRewardsScript;
    private queueNamespaceId;
    private keyId;
    private completeNotification;
    private logSetting;
    private createdAt;
    private updatedAt;
    getNamespaceId(): string | null;
    setNamespaceId(namespaceId: string | null): this;
    withNamespaceId(namespaceId: string | null): this;
    getName(): string | null;
    setName(name: string | null): this;
    withName(name: string | null): this;
    getDescription(): string | null;
    setDescription(description: string | null): this;
    withDescription(description: string | null): this;
    getMissionCompleteScript(): ScriptSetting | null;
    setMissionCompleteScript(missionCompleteScript: ScriptSetting | null): this;
    withMissionCompleteScript(missionCompleteScript: ScriptSetting | null): this;
    getCounterIncrementScript(): ScriptSetting | null;
    setCounterIncrementScript(counterIncrementScript: ScriptSetting | null): this;
    withCounterIncrementScript(counterIncrementScript: ScriptSetting | null): this;
    getReceiveRewardsScript(): ScriptSetting | null;
    setReceiveRewardsScript(receiveRewardsScript: ScriptSetting | null): this;
    withReceiveRewardsScript(receiveRewardsScript: ScriptSetting | null): this;
    getQueueNamespaceId(): string | null;
    setQueueNamespaceId(queueNamespaceId: string | null): this;
    withQueueNamespaceId(queueNamespaceId: string | null): this;
    getKeyId(): string | null;
    setKeyId(keyId: string | null): this;
    withKeyId(keyId: string | null): this;
    getCompleteNotification(): NotificationSetting | null;
    setCompleteNotification(completeNotification: NotificationSetting | null): this;
    withCompleteNotification(completeNotification: NotificationSetting | null): this;
    getLogSetting(): LogSetting | null;
    setLogSetting(logSetting: LogSetting | null): this;
    withLogSetting(logSetting: LogSetting | null): this;
    getCreatedAt(): number | null;
    setCreatedAt(createdAt: number | null): this;
    withCreatedAt(createdAt: number | null): this;
    getUpdatedAt(): number | null;
    setUpdatedAt(updatedAt: number | null): this;
    withUpdatedAt(updatedAt: number | null): this;
    static fromDict(data: {
        [key: string]: any;
    }): Namespace | null;
    toDict(): {
        [key: string]: any;
    };
}

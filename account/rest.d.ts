import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2AccountRestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    prepareImportUserDataByUserId(request: Request.PrepareImportUserDataByUserIdRequest): Promise<Result.PrepareImportUserDataByUserIdResult>;
    importUserDataByUserId(request: Request.ImportUserDataByUserIdRequest): Promise<Result.ImportUserDataByUserIdResult>;
    checkImportUserDataByUserId(request: Request.CheckImportUserDataByUserIdRequest): Promise<Result.CheckImportUserDataByUserIdResult>;
    describeAccounts(request: Request.DescribeAccountsRequest): Promise<Result.DescribeAccountsResult>;
    createAccount(request: Request.CreateAccountRequest): Promise<Result.CreateAccountResult>;
    updateTimeOffset(request: Request.UpdateTimeOffsetRequest): Promise<Result.UpdateTimeOffsetResult>;
    updateBanned(request: Request.UpdateBannedRequest): Promise<Result.UpdateBannedResult>;
    addBan(request: Request.AddBanRequest): Promise<Result.AddBanResult>;
    removeBan(request: Request.RemoveBanRequest): Promise<Result.RemoveBanResult>;
    getAccount(request: Request.GetAccountRequest): Promise<Result.GetAccountResult>;
    deleteAccount(request: Request.DeleteAccountRequest): Promise<Result.DeleteAccountResult>;
    authentication(request: Request.AuthenticationRequest): Promise<Result.AuthenticationResult>;
    describeTakeOvers(request: Request.DescribeTakeOversRequest): Promise<Result.DescribeTakeOversResult>;
    describeTakeOversByUserId(request: Request.DescribeTakeOversByUserIdRequest): Promise<Result.DescribeTakeOversByUserIdResult>;
    createTakeOver(request: Request.CreateTakeOverRequest): Promise<Result.CreateTakeOverResult>;
    createTakeOverByUserId(request: Request.CreateTakeOverByUserIdRequest): Promise<Result.CreateTakeOverByUserIdResult>;
    getTakeOver(request: Request.GetTakeOverRequest): Promise<Result.GetTakeOverResult>;
    getTakeOverByUserId(request: Request.GetTakeOverByUserIdRequest): Promise<Result.GetTakeOverByUserIdResult>;
    updateTakeOver(request: Request.UpdateTakeOverRequest): Promise<Result.UpdateTakeOverResult>;
    updateTakeOverByUserId(request: Request.UpdateTakeOverByUserIdRequest): Promise<Result.UpdateTakeOverByUserIdResult>;
    deleteTakeOver(request: Request.DeleteTakeOverRequest): Promise<Result.DeleteTakeOverResult>;
    deleteTakeOverByUserIdentifier(request: Request.DeleteTakeOverByUserIdentifierRequest): Promise<Result.DeleteTakeOverByUserIdentifierResult>;
    deleteTakeOverByUserId(request: Request.DeleteTakeOverByUserIdRequest): Promise<Result.DeleteTakeOverByUserIdResult>;
    doTakeOver(request: Request.DoTakeOverRequest): Promise<Result.DoTakeOverResult>;
    describePlatformIds(request: Request.DescribePlatformIdsRequest): Promise<Result.DescribePlatformIdsResult>;
    describePlatformIdsByUserId(request: Request.DescribePlatformIdsByUserIdRequest): Promise<Result.DescribePlatformIdsByUserIdResult>;
    createPlatformId(request: Request.CreatePlatformIdRequest): Promise<Result.CreatePlatformIdResult>;
    createPlatformIdByUserId(request: Request.CreatePlatformIdByUserIdRequest): Promise<Result.CreatePlatformIdByUserIdResult>;
    getPlatformId(request: Request.GetPlatformIdRequest): Promise<Result.GetPlatformIdResult>;
    getPlatformIdByUserId(request: Request.GetPlatformIdByUserIdRequest): Promise<Result.GetPlatformIdByUserIdResult>;
    findPlatformId(request: Request.FindPlatformIdRequest): Promise<Result.FindPlatformIdResult>;
    findPlatformIdByUserId(request: Request.FindPlatformIdByUserIdRequest): Promise<Result.FindPlatformIdByUserIdResult>;
    deletePlatformId(request: Request.DeletePlatformIdRequest): Promise<Result.DeletePlatformIdResult>;
    deletePlatformIdByUserIdentifier(request: Request.DeletePlatformIdByUserIdentifierRequest): Promise<Result.DeletePlatformIdByUserIdentifierResult>;
    deletePlatformIdByUserId(request: Request.DeletePlatformIdByUserIdRequest): Promise<Result.DeletePlatformIdByUserIdResult>;
    getDataOwnerByUserId(request: Request.GetDataOwnerByUserIdRequest): Promise<Result.GetDataOwnerByUserIdResult>;
    deleteDataOwnerByUserId(request: Request.DeleteDataOwnerByUserIdRequest): Promise<Result.DeleteDataOwnerByUserIdResult>;
}

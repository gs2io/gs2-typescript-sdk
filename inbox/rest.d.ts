import AbstractGs2RestClient from '../core/AbstractGs2RestClient';
import { Gs2RestSession } from '../core/model';
import * as Request from './request';
import * as Result from './result';
export default class Gs2InboxRestClient extends AbstractGs2RestClient {
    constructor(session: Gs2RestSession);
    describeNamespaces(request: Request.DescribeNamespacesRequest): Promise<Result.DescribeNamespacesResult>;
    createNamespace(request: Request.CreateNamespaceRequest): Promise<Result.CreateNamespaceResult>;
    getNamespaceStatus(request: Request.GetNamespaceStatusRequest): Promise<Result.GetNamespaceStatusResult>;
    getNamespace(request: Request.GetNamespaceRequest): Promise<Result.GetNamespaceResult>;
    updateNamespace(request: Request.UpdateNamespaceRequest): Promise<Result.UpdateNamespaceResult>;
    deleteNamespace(request: Request.DeleteNamespaceRequest): Promise<Result.DeleteNamespaceResult>;
    dumpUserDataByUserId(request: Request.DumpUserDataByUserIdRequest): Promise<Result.DumpUserDataByUserIdResult>;
    checkDumpUserDataByUserId(request: Request.CheckDumpUserDataByUserIdRequest): Promise<Result.CheckDumpUserDataByUserIdResult>;
    cleanUserDataByUserId(request: Request.CleanUserDataByUserIdRequest): Promise<Result.CleanUserDataByUserIdResult>;
    checkCleanUserDataByUserId(request: Request.CheckCleanUserDataByUserIdRequest): Promise<Result.CheckCleanUserDataByUserIdResult>;
    describeMessages(request: Request.DescribeMessagesRequest): Promise<Result.DescribeMessagesResult>;
    describeMessagesByUserId(request: Request.DescribeMessagesByUserIdRequest): Promise<Result.DescribeMessagesByUserIdResult>;
    sendMessageByUserId(request: Request.SendMessageByUserIdRequest): Promise<Result.SendMessageByUserIdResult>;
    getMessage(request: Request.GetMessageRequest): Promise<Result.GetMessageResult>;
    getMessageByUserId(request: Request.GetMessageByUserIdRequest): Promise<Result.GetMessageByUserIdResult>;
    receiveGlobalMessage(request: Request.ReceiveGlobalMessageRequest): Promise<Result.ReceiveGlobalMessageResult>;
    receiveGlobalMessageByUserId(request: Request.ReceiveGlobalMessageByUserIdRequest): Promise<Result.ReceiveGlobalMessageByUserIdResult>;
    openMessage(request: Request.OpenMessageRequest): Promise<Result.OpenMessageResult>;
    openMessageByUserId(request: Request.OpenMessageByUserIdRequest): Promise<Result.OpenMessageByUserIdResult>;
    readMessage(request: Request.ReadMessageRequest): Promise<Result.ReadMessageResult>;
    readMessageByUserId(request: Request.ReadMessageByUserIdRequest): Promise<Result.ReadMessageByUserIdResult>;
    deleteMessage(request: Request.DeleteMessageRequest): Promise<Result.DeleteMessageResult>;
    deleteMessageByUserId(request: Request.DeleteMessageByUserIdRequest): Promise<Result.DeleteMessageByUserIdResult>;
    sendByStampSheet(request: Request.SendByStampSheetRequest): Promise<Result.SendByStampSheetResult>;
    openByStampTask(request: Request.OpenByStampTaskRequest): Promise<Result.OpenByStampTaskResult>;
    deleteMessageByStampTask(request: Request.DeleteMessageByStampTaskRequest): Promise<Result.DeleteMessageByStampTaskResult>;
    exportMaster(request: Request.ExportMasterRequest): Promise<Result.ExportMasterResult>;
    getCurrentMessageMaster(request: Request.GetCurrentMessageMasterRequest): Promise<Result.GetCurrentMessageMasterResult>;
    updateCurrentMessageMaster(request: Request.UpdateCurrentMessageMasterRequest): Promise<Result.UpdateCurrentMessageMasterResult>;
    updateCurrentMessageMasterFromGitHub(request: Request.UpdateCurrentMessageMasterFromGitHubRequest): Promise<Result.UpdateCurrentMessageMasterFromGitHubResult>;
    describeGlobalMessageMasters(request: Request.DescribeGlobalMessageMastersRequest): Promise<Result.DescribeGlobalMessageMastersResult>;
    createGlobalMessageMaster(request: Request.CreateGlobalMessageMasterRequest): Promise<Result.CreateGlobalMessageMasterResult>;
    getGlobalMessageMaster(request: Request.GetGlobalMessageMasterRequest): Promise<Result.GetGlobalMessageMasterResult>;
    updateGlobalMessageMaster(request: Request.UpdateGlobalMessageMasterRequest): Promise<Result.UpdateGlobalMessageMasterResult>;
    deleteGlobalMessageMaster(request: Request.DeleteGlobalMessageMasterRequest): Promise<Result.DeleteGlobalMessageMasterResult>;
    describeGlobalMessages(request: Request.DescribeGlobalMessagesRequest): Promise<Result.DescribeGlobalMessagesResult>;
    getGlobalMessage(request: Request.GetGlobalMessageRequest): Promise<Result.GetGlobalMessageResult>;
    getReceivedByUserId(request: Request.GetReceivedByUserIdRequest): Promise<Result.GetReceivedByUserIdResult>;
    updateReceivedByUserId(request: Request.UpdateReceivedByUserIdRequest): Promise<Result.UpdateReceivedByUserIdResult>;
    deleteReceivedByUserId(request: Request.DeleteReceivedByUserIdRequest): Promise<Result.DeleteReceivedByUserIdResult>;
}
